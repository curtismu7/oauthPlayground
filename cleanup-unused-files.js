#!/usr/bin/env node

/**
 * Automated cleanup script for unused files
 * Generated by detailed unused code analysis
 */

import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üßπ Starting automated cleanup of unused files...\n');

const filesToRemove = [
	'src/pages/Flows.tsx',
	'src/pages/OIDC.tsx',
	'src/pages/TokenInspector.new.tsx',
	'src/pages/docs/OAuth2SecurityBestPractices.tsx',
	'src/pages/flows/ResourceOwnerPasswordFlow.tsx',
	'src/types/flowTypes.ts',
	'src/types/oauth.ts',
	'src/types/oauthErrors.ts',
	'src/types/oauthFlows.ts',
	'src/types/storage.ts',
	'src/types/token-inspector.ts',
	'src/types/url.ts',
	'src/utils/activityTracker.ts',
	'src/utils/callbackUrls.ts',
	'src/utils/clientAuthentication.ts',
	'src/utils/clientLogger.ts',
	'src/utils/clipboard.ts',
	'src/utils/crypto.ts',
	'src/utils/enhancedDebug.ts',
	'src/utils/errorRecovery.ts',
	'src/utils/flowConfiguration.ts',
	'src/utils/flowStepSystem.ts',
	'src/utils/jwt.ts',
	'src/utils/jwtGenerator.ts',
	'src/utils/logger.ts',
	'src/utils/oidcCompliance.ts',
	'src/utils/performance.ts',
	'src/utils/pingoneErrorInterpreter.ts',
	'src/utils/scrollManager.ts',
	'src/utils/secureJson.ts',
	'src/utils/tokenHistory.ts',
	'src/utils/tokenSourceTracker.ts',
	'src/services/config.ts',
	'src/styles/global.ts',
	'src/styles/styled.d.ts',
	'src/theme.d.ts',
	'src/vite-env.d.ts',
	'src/components/CachingDashboard.tsx',
	'src/components/EnhancedStepFlowV2.tsx',
	'src/components/FlowBadge.tsx',
	'src/components/LazyLoadingFallback.tsx',
	'src/components/LoadingSpinner.tsx',
	'src/components/MessageExamples.tsx',
	'src/components/MobileResponsiveness.tsx',
	'src/components/OAuthErrorHelper.tsx',
	'src/components/ServerStatusProvider.tsx',
	'src/components/StandardMessage.tsx',
	'src/components/UXEnhancements.tsx',
	'src/components/UserFriendlyError.tsx',
	'src/hooks/useAccessibility.ts',
	'src/hooks/useAnalytics.ts',
	'src/hooks/useCSRFProtection.tsx',
	'src/hooks/useErrorDiagnosis.ts',
	'src/hooks/useFlowAnalysis.ts',
	'src/hooks/useLazyLoading.ts',
	'src/hooks/usePageScroll.ts',
	'src/hooks/useScrollToTop.ts',
	'src/hooks/useSecurityAnalytics.ts',
	'src/hooks/useServiceWorker.ts',
	'src/hooks/useTokenAnalysis.ts',
	'src/hooks/useTokenRefresh.ts',
	'src/hooks/useUserBehaviorTracking.ts',
];

let removedCount = 0;
let totalSize = 0;

for (const file of filesToRemove) {
	const fullPath = path.join(__dirname, file);

	try {
		if (fs.existsSync(fullPath)) {
			const stats = fs.statSync(fullPath);
			totalSize += stats.size;

			fs.unlinkSync(fullPath);
			console.log(`‚úÖ Removed: ${file}`);
			removedCount++;
		} else {
			console.log(`‚ö†Ô∏è  File not found: ${file}`);
		}
	} catch (error) {
		console.log(`‚ùå Error removing ${file}: ${error.message}`);
	}
}

console.log(`\nüéâ Cleanup complete!`);
console.log(`üìä Removed ${removedCount} files`);
console.log(`üíæ Freed up ${(totalSize / 1024).toFixed(2)} KB`);
