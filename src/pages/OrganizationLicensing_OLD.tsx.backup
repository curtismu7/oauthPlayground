// src/pages/OrganizationLicensing.tsx
// Page to display PingOne Organization licensing information

import React, { useState, useEffect } from 'react';
import {
	FiCheckCircle,
	FiAlertTriangle,
	FiRefreshCw,
	FiInfo,
	FiUsers,
	FiLayers,
	FiCalendar,
	FiShield,
	FiActivity,
} from 'react-icons/fi';
import styled from 'styled-components';
import {
	getOrganizationLicensingInfo,
	getEnvironmentLicensingInfo,
	getAllLicenses,
	type OrganizationInfo,
	type OrganizationLicense,
} from '../services/organizationLicensingService';
import { v4ToastManager } from '../utils/v4ToastMessages';
import { useAuth } from '../contexts/NewAuthContext';
import { CollapsibleHeader } from '../services/collapsibleHeaderService';
import PageLayoutService from '../services/pageLayoutService';
import ComprehensiveCredentialsService from '../services/comprehensiveCredentialsService';
import type { StepCredentials } from '../types/common';
import { getOAuthTokens } from '../utils/tokenStorage';
import { FlowHeader } from '../services/flowHeaderService';
import { usePageScroll } from '../hooks/usePageScroll';
import { useNavigate } from 'react-router-dom';
import { credentialManager } from '../utils/credentialManager';
import { FlowCredentialService } from '../services/flowCredentialService';

const pageConfig = {
	flowType: 'documentation' as const,
	theme: 'purple' as const,
	maxWidth: '64rem', // Standard documentation width
	showHeader: true,
	showFooter: false,
	responsive: true,
	flowId: 'organization-licensing',
};

const { PageContainer, ContentWrapper } = 
	PageLayoutService.createPageLayout(pageConfig);

const ContentCard = styled.div`
	padding: 1.5rem;
`;

const LicenseGrid = styled.div`
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 1.5rem;
	margin-top: 1rem;
`;

const LicenseCard = styled.div`
	background: ${({ theme }) => theme.background || '#ffffff'};
	border: 2px solid ${({ $borderColor }) => $borderColor || '#e5e7eb'};
	border-radius: 8px;
	padding: 1.5rem;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
`;

const CardHeader = styled.div`
	display: flex;
	align-items: center;
	justify-content: space-between;
	margin-bottom: 1rem;
`;

const CardTitle = styled.h3`
	margin: 0;
	font-size: 1.125rem;
	font-weight: 600;
	color: #111827;
	display: flex;
	align-items: center;
	gap: 0.5rem;
`;

const StatusBadge = styled.span<{ $status: string }>`
	padding: 0.25rem 0.75rem;
	border-radius: 9999px;
	font-size: 0.75rem;
	font-weight: 600;
	background: ${({ $status }) => {
		switch ($status) {
			case 'active':
				return '#d1fae5';
			case 'expired':
				return '#fee2e2';
			case 'trial':
				return '#fef3c7';
			default:
				return '#e5e7eb';
		}
	}};
	color: ${({ $status }) => {
		switch ($status) {
			case 'active':
				return '#065f46';
			case 'expired':
				return '#991b1b';
			case 'trial':
				return '#92400e';
			default:
				return '#6b7280';
		}
	}};
`;

const InfoRow = styled.div`
	display: flex;
	justify-content: space-between;
	padding: 0.5rem 0;
	border-bottom: 1px solid #e5e7eb;
	
	&:last-child {
		border-bottom: none;
	}
`;

const InfoLabel = styled.span`
	font-weight: 600;
	color: #6b7280;
`;

const InfoValue = styled.span`
	color: #111827;
`;

const ProgressBar = styled.div<{ $percentage: number; $color?: string }>`
	width: 100%;
	height: 8px;
	background: #e5e7eb;
	border-radius: 4px;
	overflow: hidden;
	margin-top: 0.5rem;
	
	&::after {
		content: '';
		display: block;
		width: ${({ $percentage }) => $percentage}%;
		height: 100%;
		background: ${({ $color }) => $color || '#3b82f6'};
		transition: width 0.3s ease;
	}
`;

const Button = styled.button<{ $variant?: 'primary' | 'secondary' }>`
	padding: 0.75rem 1.5rem;
	border-radius: 0.5rem;
	border: none;
	font-weight: 600;
	cursor: pointer;
	display: flex;
	align-items: center;
	gap: 0.5rem;
	transition: all 0.2s;
	
	background: ${({ $variant }) =>
		$variant === 'primary' ? '#3b82f6' : '#6b7280'};
	color: white;
	
	&:hover {
		background: ${({ $variant }) =>
			$variant === 'primary' ? '#2563eb' : '#4b5563'};
	}
	
	&:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}
`;

const ErrorMessage = styled.div`
	background: #fef2f2;
	border: 1px solid #fecaca;
	border-radius: 8px;
	padding: 1rem;
	color: #991b1b;
	margin: 1rem 0;
`;

const LoadingMessage = styled.div`
	text-align: center;
	padding: 2rem;
	color: #6b7280;
`;

const OrganizationLicensing: React.FC = () => {
	usePageScroll({ pageName: 'Organization Licensing', force: true });
	const { tokens } = useAuth();
	const navigate = useNavigate();
	const [orgInfo, setOrgInfo] = useState<OrganizationInfo | null>(null);
	const [allLicenses, setAllLicenses] = useState<OrganizationLicense[]>([]);
	const [loading, setLoading] = useState(false);
	const [loadingLicenses, setLoadingLicenses] = useState(false);
	const [error, setError] = useState<string | null>(null);
	const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
	const [storedTokens, setStoredTokens] = useState<{ access_token?: string } | null>(null);
	const [credentials, setCredentials] = useState<StepCredentials>({
		environmentId: '',
		clientId: '',
		clientSecret: '',
		redirectUri: '',
		scope: 'openid profile email',
		scopes: 'openid profile email',
	});
	const [credentialsSaved, setCredentialsSaved] = useState(false);

	// Load credentials from storage on mount
	useEffect(() => {
		const savedCreds = credentialManager.getAllCredentials();
		if (savedCreds && savedCreds.environmentId && savedCreds.clientId) {
			console.log('[OrganizationLicensing] Loading saved credentials from storage');
			setCredentials({
				environmentId: savedCreds.environmentId || '',
				clientId: savedCreds.clientId || '',
				clientSecret: savedCreds.clientSecret || '',
				redirectUri: savedCreds.redirectUri || '',
				scope: 'openid profile email',
				scopes: 'openid profile email',
			});
			setCredentialsSaved(true);
		}
	}, []);

	const handleCredentialsChange = (creds: StepCredentials) => {
		setCredentials(creds);
		setCredentialsSaved(false);
	};

	const saveCredentials = async () => {
		try {
			console.log('[OrganizationLicensing] Saving credentials for worker token flow');
			
			// Save to both credentialManager AND FlowCredentialService for cross-flow access
			// 1. Save to credentialManager (global)
			const configSuccess = credentialManager.saveConfigCredentials({
				environmentId: credentials.environmentId,
				clientId: credentials.clientId,
				clientSecret: credentials.clientSecret,
				redirectUri: credentials.redirectUri,
				scopes: ['p1:read:organization', 'p1:read:licensing'], // Worker token scopes
			});

			console.log('[OrganizationLicensing] Config credentials saved:', configSuccess);

			// 2. Also save to FlowCredentialService for worker-token-v7 flow
			const flowSuccess = await FlowCredentialService.saveFlowCredentials(
				'worker-token-v7',
				{
					...credentials,
					scope: 'p1:read:organization p1:read:licensing',
					scopes: 'p1:read:organization p1:read:licensing',
				}
			);

			console.log('[OrganizationLicensing] Flow credentials saved:', flowSuccess);

			if (configSuccess || flowSuccess) {
				setCredentialsSaved(true);
				v4ToastManager.showSuccess('Credentials saved! You can now get a worker token.');
			} else {
				throw new Error('Failed to save credentials');
			}
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : 'Failed to save credentials';
			v4ToastManager.showError(errorMsg);
		}
	};

	const handleGetWorkerToken = () => {
		// Navigate to worker token flow page
		navigate('/flows/worker-token-v7');
	};

	// Get access token from various sources
	const getAccessToken = (): string | null => {
		console.log('[OrganizationLicensing] getAccessToken called:', {
			hasTokensFromAuth: !!tokens?.access_token,
			hasTokensFromStorage: !!storedTokens?.access_token,
		});
		
		// 1. Check auth context tokens
		if (tokens?.access_token) {
			return tokens.access_token;
		}
		
		// 2. Check token storage (for worker tokens)
		if (storedTokens?.access_token) {
			return storedTokens.access_token;
		}
		
		return null;
	};
	
	// Load stored tokens on mount and when tokens change
	useEffect(() => {
		const loadStoredTokens = () => {
			const tokensFromStorage = getOAuthTokens();
			console.log('[OrganizationLicensing] Loading stored tokens:', tokensFromStorage ? 'Token found' : 'No tokens');
			setStoredTokens(tokensFromStorage);
		};
		
		loadStoredTokens();
		
		// Listen for storage changes (when worker tokens are obtained)
		const handleStorageChange = (e: StorageEvent) => {
			if (e.key === 'pingone_secure_tokens') {
				console.log('[OrganizationLicensing] Storage changed, reloading tokens');
				loadStoredTokens();
			}
		};
		
		window.addEventListener('storage', handleStorageChange);
		
		// Also check on focus in case storage was updated in another tab
		const handleFocus = () => {
			console.log('[OrganizationLicensing] Window focused, reloading tokens');
			loadStoredTokens();
		};
		
		window.addEventListener('focus', handleFocus);
		
		// Check for tokens every 2 seconds (for when coming back from worker token flow)
		const interval = setInterval(() => {
			loadStoredTokens();
		}, 2000);
		
		return () => {
			window.removeEventListener('storage', handleStorageChange);
			window.removeEventListener('focus', handleFocus);
			clearInterval(interval);
		};
	}, []);

	const fetchOrganizationInfo = async () => {
		const accessToken = getAccessToken();
		
		if (!accessToken) {
			setError('No access token available. Please log in or enter credentials.');
			return;
		}
		
		console.log('[OrganizationLicensing] Fetching organization info with access token length:', accessToken.length);

		setLoading(true);
		setError(null);

		try {
			const info = await getOrganizationLicensingInfo(accessToken);
			
			if (info) {
				setOrgInfo(info);
				setLastUpdated(new Date());
				v4ToastManager.showSuccess('Organization licensing information loaded successfully!');
			} else {
				setError('Failed to fetch organization licensing information. Please check your permissions and try again.');
			}
		} catch (err) {
			const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
			setError(errorMessage);
			v4ToastManager.showError(`Failed to load licensing information: ${errorMessage}`);
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		const accessToken = getAccessToken();
		// Tokens loaded, ready to fetch when user clicks Refresh
	}, [tokens?.access_token, storedTokens]);

	const fetchAllLicenses = async () => {
		const accessToken = getAccessToken();
		
		if (!accessToken) {
			setError('No access token available. Please log in or enter credentials.');
			return;
		}
		
		setLoadingLicenses(true);
		setError(null);
		
		try {
			const licenses = await getAllLicenses(accessToken);
			setAllLicenses(licenses);
			setLastUpdated(new Date());
			v4ToastManager.showSuccess(`Successfully fetched ${licenses.length} licenses`);
		} catch (err) {
			const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
			setError(errorMessage);
			v4ToastManager.showError(`Failed to fetch licenses: ${errorMessage}`);
		} finally {
			setLoadingLicenses(false);
		}
	};

	const renderLicenseCard = (license: OrganizationLicense) => (
		<LicenseCard $borderColor={
			license.status === 'active' ? '#10b981' :
			license.status === 'expired' ? '#ef4444' :
			license.status === 'trial' ? '#f59e0b' : '#e5e7eb'
		}>
			<CardHeader>
				<CardTitle>
					<FiShield /> {license.name}
				</CardTitle>
				<StatusBadge $status={license.status}>
					{license.status.toUpperCase()}
				</StatusBadge>
			</CardHeader>

			<InfoRow>
				<InfoLabel>License Type:</InfoLabel>
				<InfoValue>{license.type}</InfoValue>
			</InfoRow>

			<InfoRow>
				<InfoLabel>Start Date:</InfoLabel>
				<InfoValue>{new Date(license.startDate).toLocaleDateString()}</InfoValue>
			</InfoRow>

			{license.endDate && (
				<InfoRow>
					<InfoLabel>End Date:</InfoLabel>
					<InfoValue>{new Date(license.endDate).toLocaleDateString()}</InfoValue>
				</InfoRow>
			)}

			{license.users && (
				<>
					<InfoRow>
						<InfoLabel>Users:</InfoLabel>
						<InfoValue>
							{license.users.used} / {license.users.total} used
						</InfoValue>
					</InfoRow>
					<ProgressBar 
						$percentage={(license.users.used / license.users.total) * 100}
						$color={license.users.used / license.users.total > 0.9 ? '#ef4444' : '#10b981'}
					/>
				</>
			)}

			{license.applications && (
				<>
					<InfoRow>
						<InfoLabel>Applications:</InfoLabel>
						<InfoValue>
							{license.applications.used} / {license.applications.total} used
						</InfoValue>
					</InfoRow>
					<ProgressBar 
						$percentage={(license.applications.used / license.applications.total) * 100}
						$color={license.applications.used / license.applications.total > 0.9 ? '#ef4444' : '#10b981'}
					/>
				</>
			)}

			{license.features && license.features.length > 0 && (
				<div style={{ marginTop: '1rem' }}>
					<InfoLabel style={{ marginBottom: '0.5rem', display: 'block' }}>Enabled Features:</InfoLabel>
					{license.features.map((feature, idx) => (
						<span 
							key={idx}
							style={{
								display: 'inline-block',
								background: '#eff6ff',
								color: '#1e40af',
								padding: '0.25rem 0.75rem',
								borderRadius: '9999px',
								fontSize: '0.875rem',
								marginRight: '0.5rem',
								marginBottom: '0.5rem',
							}}
						>
							{feature}
						</span>
					))}
				</div>
			)}
		</LicenseCard>
	);

	return (
		<PageContainer>
			<ContentWrapper>
				<FlowHeader flowId="organization-licensing" />
				<ContentCard>
					<div style={{ marginBottom: '1.5rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
						<h2 style={{ margin: 0, fontSize: '1.5rem', fontWeight: 600, color: '#111827' }}>
							<FiShield /> Organization Licensing Information
						</h2>
						<div style={{ display: 'flex', gap: '0.75rem', alignItems: 'center' }}>
							{!getAccessToken() && credentialsSaved && (
								<Button 
									$variant="primary" 
									onClick={handleGetWorkerToken}
									style={{ backgroundColor: '#059669' }}
								>
									Get Worker Token
								</Button>
							)}
							<Button 
								$variant="primary" 
								onClick={fetchOrganizationInfo}
								disabled={loading || !getAccessToken()}
								title={!getAccessToken() ? 'Please get a worker token first' : 'Fetch licensing information from PingOne'}
							>
								<FiRefreshCw style={{ animation: loading ? 'spin 1s linear infinite' : 'none' }} />
								{loading ? 'Loading...' : 'Get Licensing Info'}
							</Button>
							<Button 
								$variant="secondary" 
								onClick={fetchAllLicenses}
								disabled={loadingLicenses || !getAccessToken()}
								title={!getAccessToken() ? 'Please get a worker token first' : 'Fetch all licenses from PingOne'}
							>
								<FiRefreshCw style={{ animation: loadingLicenses ? 'spin 1s linear infinite' : 'none' }} />
								{loadingLicenses ? 'Loading...' : 'Get All Licenses'}
							</Button>
							{!getAccessToken() && (
								<span style={{ fontSize: '0.875rem', color: '#6b7280' }}>
									← Get token first
								</span>
							)}
						</div>
					</div>

					{lastUpdated && (
						<div style={{ color: '#6b7280', fontSize: '0.875rem', marginBottom: '1rem' }}>
							Last updated: {lastUpdated.toLocaleString()}
						</div>
					)}

					{error && (
						<ErrorMessage>
							<FiAlertTriangle /> {error}
						</ErrorMessage>
					)}

					{loading && !orgInfo && (
						<LoadingMessage>
							<FiRefreshCw style={{ animation: 'spin 1s linear infinite', fontSize: '2rem' }} />
							<div style={{ marginTop: '1rem' }}>Loading organization licensing information...</div>
						</LoadingMessage>
					)}

					{!loading && !error && !orgInfo && (
						<div style={{ padding: '2rem', background: '#f8fafc', borderRadius: '0.5rem', border: '1px solid #e5e7eb' }}>
							{!credentialsSaved && !getAccessToken() ? (
								<div style={{ padding: '1rem', background: '#f3f4f6', borderRadius: '0.375rem' }}>
									<h4 style={{ color: '#374151', marginBottom: '0.5rem' }}>Step 1: Configure Credentials</h4>
									<p style={{ color: '#6b7280', marginBottom: '1rem', fontSize: '0.875rem' }}>
										Enter your PingOne environment ID, client ID, and client secret. These will be saved for the worker token flow.
									</p>
									<ComprehensiveCredentialsService
										flowType="organization-licensing"
										credentials={credentials}
										onCredentialsChange={handleCredentialsChange}
										onSaveCredentials={saveCredentials}
										hasUnsavedChanges={!credentialsSaved}
										title=""
										subtitle=""
										showAdvancedConfig={false}
										showConfigChecker={false}
										requireClientSecret={true}
										showRedirectUri={false}
										showPostLogoutRedirectUri={false}
										showLoginHint={false}
										showClientAuthMethod={false}
										showEnvironmentIdInput={true}
									/>
								</div>
							) : credentialsSaved && !getAccessToken() ? (
								<div style={{
									textAlign: 'center',
									padding: '2rem'
								}}>
									<FiCheckCircle size={48} style={{ color: '#10b981', marginBottom: '1rem' }} />
									<h3 style={{ color: '#374151', marginBottom: '0.5rem' }}>Step 2: Get Worker Token</h3>
									<p style={{ color: '#6b7280', marginBottom: '1.5rem' }}>
										Credentials saved! Click "Get Worker Token" above to navigate to the worker token flow and obtain an access token.
									</p>
								</div>
							) : getAccessToken() ? (
								<div style={{
									textAlign: 'center',
									padding: '2rem'
								}}>
									<FiCheckCircle size={48} style={{ color: '#10b981', marginBottom: '1rem' }} />
									<h3 style={{ color: '#374151', marginBottom: '0.5rem' }}>Step 3: Get Licensing Information</h3>
									<p style={{ color: '#6b7280', marginBottom: '1.5rem' }}>
										Access token available! Click "Get Licensing Info" above to fetch your organization's licensing information.
									</p>
									{tokens?.access_token && (
										<div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '0.5rem', fontSize: '0.875rem', color: '#9ca3af' }}>
											Using token from authentication
										</div>
									)}
									{storedTokens?.access_token && !tokens?.access_token && (
										<div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '0.5rem', fontSize: '0.875rem', color: '#9ca3af' }}>
											Using stored worker token
										</div>
									)}
								</div>
							) : null}
						</div>
					)}

					{orgInfo && (
						<>
							<CollapsibleHeader
								title="Organization Information"
								icon={<FiInfo />}
								theme="blue"
							>
								<LicenseGrid>
									<LicenseCard $borderColor="#3b82f6">
										<CardHeader>
											<CardTitle>
												<FiActivity /> Organization Details
											</CardTitle>
										</CardHeader>
										<InfoRow>
											<InfoLabel>Name:</InfoLabel>
											<InfoValue>{orgInfo.name}</InfoValue>
										</InfoRow>
										<InfoRow>
											<InfoLabel>Region:</InfoLabel>
											<InfoValue>{orgInfo.region}</InfoValue>
										</InfoRow>
										<InfoRow>
											<InfoLabel>Created:</InfoLabel>
											<InfoValue>{new Date(orgInfo.createdAt).toLocaleDateString()}</InfoValue>
										</InfoRow>
										<InfoRow>
											<InfoLabel>Environments:</InfoLabel>
											<InfoValue>{orgInfo.environments.length}</InfoValue>
										</InfoRow>
									</LicenseCard>
								</LicenseGrid>
							</CollapsibleHeader>

							<CollapsibleHeader
								title="License Information"
								icon={<FiShield />}
								theme="green"
							>
								{renderLicenseCard(orgInfo.license)}
							</CollapsibleHeader>

							{orgInfo.environments && orgInfo.environments.length > 0 && (
								<CollapsibleHeader
									title="Environments"
									icon={<FiLayers />}
									theme="orange"
								>
									<LicenseGrid>
										{orgInfo.environments.map((env) => (
											<LicenseCard key={env.id} $borderColor="#f59e0b">
												<CardHeader>
													<CardTitle>
														<FiUsers /> {env.name}
													</CardTitle>
												</CardHeader>
												<InfoRow>
													<InfoLabel>Environment ID:</InfoLabel>
													<InfoValue style={{ fontSize: '0.875rem' }}>{env.id}</InfoValue>
												</InfoRow>
												<InfoRow>
													<InfoLabel>Region:</InfoLabel>
													<InfoValue>{env.region}</InfoValue>
												</InfoRow>
											</LicenseCard>
										))}
									</LicenseGrid>
								</CollapsibleHeader>
							)}
						</>
					)}
				</ContentCard>
			</ContentWrapper>
		</PageContainer>
	);
};

export default OrganizationLicensing;
