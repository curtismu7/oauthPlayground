// src/pages/flows/OAuthImplicitFlowV5.tsx
import { useCallback, useEffect, useMemo, useState } from 'react';
import {
	FiAlertCircle,
	FiCheckCircle,
	FiChevronDown,
	FiCopy,
	FiExternalLink,
	FiInfo,
	FiShield,
	FiSettings,
	FiRefreshCw,
	FiGlobe,
	FiKey,
	FiCode,
	FiAlertTriangle,
} from 'react-icons/fi';
import { CredentialsInput } from '../../components/CredentialsInput';
import EnvironmentIdInput from '../../components/EnvironmentIdInput';
import EnhancedFlowInfoCard from '../../components/EnhancedFlowInfoCard';
import FlowSequenceDisplay from '../../components/FlowSequenceDisplay';
import PingOneApplicationConfig, {
	type PingOneApplicationState,
} from '../../components/PingOneApplicationConfig';
import { StepNavigationButtons } from '../../components/StepNavigationButtons';
import type { StepCredentials } from '../../components/steps/CommonSteps';
import { useImplicitFlowController } from '../../hooks/useImplicitFlowController';
import { usePageScroll } from '../../hooks/usePageScroll';
import { FlowHeader } from '../../services/flowHeaderService';
import { useResponseModeIntegration } from '../../services/responseModeIntegrationService';
import { oidcDiscoveryService } from '../../services/oidcDiscoveryService';
import ResponseModeSelector from '../../components/response-modes/ResponseModeSelector';
import { FlowLayoutService } from '../../services/flowLayoutService';
import { FlowStateService } from '../../services/flowStateService';
import { EnhancedApiCallDisplay } from '../../components/EnhancedApiCallDisplay';
import { EnhancedApiCallDisplayService } from '../../services/enhancedApiCallDisplayService';
import {
	TokenIntrospectionService,
	IntrospectionApiCallData,
} from '../../services/tokenIntrospectionService';
import { v4ToastManager } from '../../utils/v4ToastMessages';
import { storeFlowNavigationState } from '../../utils/flowNavigation';
import { decodeJWTHeader } from '../../utils/jwks';
import { useUISettings } from '../../contexts/UISettingsContext';

// Import shared services
import { FlowConfigurationService } from '../../services/flowConfigurationService';
import { FlowStepNavigationService } from '../../services/flowStepNavigationService';
import { FlowCopyService } from '../../services/flowCopyService';
import { FlowUIService } from '../../services/flowUIService';

// Import components
import TokenIntrospect from '../../components/TokenIntrospect';
import SecurityFeaturesDemo from '../../components/SecurityFeaturesDemo';
import JWTTokenDisplay from '../../components/JWTTokenDisplay';
import { CodeExamplesDisplay } from '../../components/CodeExamplesDisplay';
import ColoredUrlDisplay from '../../components/ColoredUrlDisplay';
import LoginSuccessModal from '../../components/LoginSuccessModal';


// Import extracted styles and config

// Get all UI components from the shared service
const {
	Container,
	ContentWrapper,
	MainCard,
	StepHeader,
	StepHeaderLeft,
	VersionBadge,
	StepHeaderTitle,
	StepHeaderSubtitle,
	StepHeaderRight,
	StepNumber,
	StepTotal,
	StepContentWrapper,
	CollapsibleSection,
	CollapsibleHeaderButton,
	CollapsibleTitle,
	CollapsibleToggleIcon,
	CollapsibleContent,
	InfoBox,
	InfoTitle,
	InfoText,
	StrongText,
	InfoList,
	ActionRow,
	Button,
	HighlightedActionButton,
	HighlightBadge,
	CodeBlock,
	GeneratedContentBox,
	GeneratedLabel,
	ParameterGrid,
	ParameterLabel,
	ParameterValue,
	FlowDiagram,
	FlowStep,
	FlowStepNumber,
	FlowStepContent,
	SectionDivider,
	ResultsSection,
	ResultsHeading,
	HelperText,
	ExplanationSection,
	ExplanationHeading,
	NextSteps,
} = FlowUIService.getFlowUIComponents();
import {
	FLOW_TYPE,
	STEP_METADATA,
	INTRO_SECTION_KEYS,
	type IntroSectionKey,
	DEFAULT_APP_CONFIG,
} from './config/OAuthImplicitFlow.config';

// Import step components

// Requirements components now generated by FlowLayoutService
const RequirementsIndicator = FlowLayoutService.getRequirementsIndicatorStyles();
const RequirementsIcon = FlowLayoutService.getRequirementsIconStyles();
const RequirementsText = FlowLayoutService.getRequirementsTextStyles();

const OAuthImplicitFlowV5: React.FC = () => {
	const controller = useImplicitFlowController({
		flowKey: 'oauth-implicit-v5',
		defaultFlowVariant: 'oauth',
		enableDebugger: true,
	});

	// Initialize shared services
	const configService = FlowConfigurationService.createOAuthImplicitConfig();
	const [credentials, setCredentials] = useState<StepCredentials>(() => {
		const stored = configService.loadConfiguration();
		return stored || {
			environmentId: '',
			clientId: '',
			clientSecret: '',
			redirectUri: 'https://localhost:3000/implicit-callback',
			scope: 'openid',
			scopes: 'openid',
			responseType: 'token',
			grantType: '',
			clientAuthMethod: 'none',
		};
	});
	const [emptyRequiredFields, setEmptyRequiredFields] = useState<Set<string>>(new Set());
	const [copiedField, setCopiedField] = useState<string | null>(null);

	// Response mode integration using centralized service
	const responseModeIntegration = useResponseModeIntegration({
		flowKey: 'implicit',
		credentials: credentials,
		setCredentials: setCredentials,
		logPrefix: '[🔐 OAUTH-IMPLICIT]',
	});

	const { responseMode, setResponseMode } = responseModeIntegration;

	// Ensure page starts at top
	usePageScroll({ pageName: 'OAuth Implicit Flow V5', force: true });

	const { settings } = useUISettings();
	const { showApiCallExamples } = settings;

	// Create handlers using shared services
	const handleFieldChange = configService.createFieldChangeHandler(setCredentials, setEmptyRequiredFields);
	const handleSaveConfiguration = configService.createSaveConfigurationHandler(() => credentials, setEmptyRequiredFields);
	const handleClearConfiguration = configService.createClearConfigurationHandler(setCredentials, setEmptyRequiredFields);
	const handleCopy = FlowCopyService.createCopyHandler(setCopiedField);

	// Override response_type for OAuth Implicit (access token only)
	useEffect(() => {
		if (credentials.responseType !== 'token') {
			setCredentials({
				...credentials,
				responseType: 'token',
			});
		}
	}, [credentials, setCredentials]);

	const [currentStep, setCurrentStep] = useState(() => {
		// Check for restore_step from token management navigation
		const restoreStep = sessionStorage.getItem('restore_step');
		if (restoreStep) {
			const step = parseInt(restoreStep, 10);
			sessionStorage.removeItem('restore_step'); // Clear after use
			return step;
		}
		return 0;
	});
	const [pingOneConfig, setPingOneConfig] = useState<PingOneApplicationState>(DEFAULT_APP_CONFIG);
	const [introspectionApiCall, setIntrospectionApiCall] = useState<IntrospectionApiCallData | null>(
		null
	);
	const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({
		...FlowStateService.createDefaultCollapsedSections(INTRO_SECTION_KEYS),
		apiCallDisplay: false, // Default to expanded for API call examples
		securityOverview: false, // Default to expanded for security overview
		securityBestPractices: false, // Default to expanded for best practices
		flowSummary: false, // Default to expanded for flow summary
		flowComparison: true, // Default to collapsed for comparison
	});
	const [showSuccessModal, setShowSuccessModal] = useState<boolean>(false);

	useEffect(() => {
		const hash = window.location.hash;
		if (hash?.includes('access_token')) {
			controller.setTokensFromFragment(hash);
			setCurrentStep(2); // Go to token response step
			v4ToastManager.showSuccess('Tokens received successfully from authorization server!');
			setShowSuccessModal(true); // Show success modal

			// Clean up URL
			window.history.replaceState({}, '', window.location.pathname);
		}
	}, [controller]);

	// Step completions are now handled by FlowStateService

	const toggleSection = useCallback((key: IntroSectionKey) => {
		setCollapsedSections((prev) => ({ ...prev, [key]: !prev[key] }));
	}, []);

	const savePingOneConfig = useCallback((config: PingOneApplicationState) => {
		setPingOneConfig(config);
		sessionStorage.setItem('oauth-implicit-v5-app-config', JSON.stringify(config));
	}, []);

	const handleGenerateAuthUrl = useCallback(async () => {
		if (!credentials.clientId || !credentials.environmentId) {
			v4ToastManager.showError(
				'Complete above action: Fill in Client ID and Environment ID first.'
			);
			return;
		}

		// Generate nonce and state if not set
		if (!controller.nonce) {
			controller.generateNonce();
		}
		if (!controller.state) {
			controller.generateState();
		}

		try {
			// Mark this flow as active for callback handling
			sessionStorage.setItem('oauth-implicit-v5-flow-active', 'true');

			await controller.generateAuthorizationUrl();
			v4ToastManager.showSuccess('Authorization URL generated successfully!');
		} catch (error) {
			console.error('[OAuthImplicitFlowV5] Failed to generate authorization URL:', error);
			v4ToastManager.showError(
				error instanceof Error ? error.message : 'Failed to generate authorization URL'
			);
		}
	}, [controller, credentials.clientId, credentials.environmentId]);

	const handleOpenAuthUrl = useCallback(() => {
		if (!controller.authUrl) {
			v4ToastManager.showError('Complete above action: Generate the authorization URL first.');
			return;
		}
		controller.handleRedirectAuthorization();
	}, [controller]);

	const navigateToTokenManagement = useCallback(() => {
		// Store flow navigation state for back navigation
		storeFlowNavigationState('oauth-implicit-v5', currentStep, 'oauth');

		// Set flow source for Token Management page (legacy support)
		sessionStorage.setItem('flow_source', 'oauth-implicit-v5');

		const flowContext = {
			flow: 'oauth-implicit-v5',
			tokens: controller.tokens,
			credentials: credentials,
			timestamp: Date.now(),
		};
		sessionStorage.setItem('tokenManagementFlowContext', JSON.stringify(flowContext));

		if (controller.tokens?.access_token) {
			localStorage.setItem('token_to_analyze', controller.tokens.access_token);
			localStorage.setItem('token_type', 'access');
			localStorage.setItem('flow_source', 'oauth-implicit-v5');
		}

		window.open('/token-management', '_blank');
	}, [controller.tokens, credentials, currentStep]);

	const handleResetFlow = useCallback(() => {
		controller.resetFlow();
		setCurrentStep(0);
	}, [controller]);

	const handleIntrospectToken = useCallback(
		async (token: string) => {
			if (!credentials.environmentId || !credentials.clientId) {
				throw new Error('Missing PingOne credentials. Please configure your credentials first.');
			}

			const request = {
				token: token,
				clientId: credentials.clientId,
				// No client secret for implicit flow (public client)
				tokenTypeHint: 'access_token' as const,
			};

			try {
				// Use the reusable service to create API call data and execute introspection
				const result = await TokenIntrospectionService.introspectToken(
					request,
					'implicit',
					`https://auth.pingone.com/${credentials.environmentId}/as/introspect`
				);

				// Set the API call data for display
				setIntrospectionApiCall(result.apiCall);

				return result.response;
			} catch (error) {
				// Create error API call using reusable service
				const errorApiCall = TokenIntrospectionService.createErrorApiCall(
					request,
					'implicit',
					error instanceof Error ? error.message : 'Unknown error',
					500,
					`https://auth.pingone.com/${credentials.environmentId}/as/introspect`
				);

				setIntrospectionApiCall(errorApiCall);
				throw error;
			}
		},
		[credentials]
	);

	// Validation and navigation functions using services
	const isStepValid = useCallback(
		(stepIndex: number) => {
			switch (stepIndex) {
				case 0:
					return true;
				case 1:
					return Boolean(controller.authUrl);
				case 2:
					return Boolean(controller.tokens);
				case 3:
					return Boolean(controller.tokens);
				case 4:
					return true;
				case 5:
					return true;
				default:
					return false;
			}
		},
		[controller.authUrl, controller.tokens]
	);

	const getStepRequirements = useCallback((stepIndex: number) => {
		switch (stepIndex) {
			case 1:
				return ['Configure credentials and generate authorization URL'];
			case 2:
				return ['Complete authorization and receive tokens'];
			case 3:
				return ['Validate and inspect received tokens'];
			case 4:
				return ['Review security features and best practices'];
			case 5:
				return ['Review flow completion and next steps'];
			default:
				return [];
		}
	}, []);

	const { handleNext, handlePrev, canNavigateNext } = FlowStateService.createStepNavigationHandlers(
		currentStep,
		setCurrentStep,
		STEP_METADATA.length
	);

const renderStepContent = useMemo(() => {
		const tokens = controller.tokens;

		switch (currentStep) {
			case 0:
				return (
					<>
						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('overview')}
								aria-expanded={!collapsedSections.overview}
							>
								<CollapsibleTitle>
									<FiInfo /> Implicit Flow Overview
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.overview}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.overview && (
								<CollapsibleContent>
									<InfoBox $variant="info">
										<FiInfo size={20} />
										<div>
											<InfoTitle>OAuth 2.0 Implicit Flow</InfoTitle>
											<InfoText>
												This is the pure OAuth 2.0 Implicit Flow that returns{' '}
												<StrongText>Access Token only</StrongText>. It's designed for authorization
												and API access, not for user authentication.
											</InfoText>
										</div>
									</InfoBox>

									<InfoBox $variant="warning">
										<FiAlertCircle size={20} />
										<div>
											<InfoTitle>Legacy Flow - Use with Caution</InfoTitle>
											<InfoText>
												The Implicit Flow is considered legacy and less secure than Authorization
												Code with PKCE. Tokens are exposed in the URL, making them vulnerable to
												interception. Use this flow only if you have specific requirements that
												prevent using Authorization Code + PKCE.
											</InfoText>
										</div>
									</InfoBox>

									<GeneratedContentBox>
										<GeneratedLabel>OAuth vs OIDC Implicit</GeneratedLabel>
										<ParameterGrid>
											<div>
												<ParameterLabel>Tokens Returned</ParameterLabel>
												<ParameterValue>Access Token only</ParameterValue>
											</div>
											<div>
												<ParameterLabel>Purpose</ParameterLabel>
												<ParameterValue>Authorization (API access)</ParameterValue>
											</div>
											<div>
												<ParameterLabel>Spec Layer</ParameterLabel>
												<ParameterValue>Defined in OAuth 2.0</ParameterValue>
											</div>
											<div>
												<ParameterLabel>Nonce Requirement</ParameterLabel>
												<ParameterValue>Not required</ParameterValue>
											</div>
											<div style={{ gridColumn: '1 / -1' }}>
												<ParameterLabel>Validation</ParameterLabel>
												<ParameterValue>Validate access token with resource server</ParameterValue>
											</div>
										</ParameterGrid>
									</GeneratedContentBox>

									<ExplanationSection>
										<ExplanationHeading>
											<FiShield /> How Implicit Flow Works
										</ExplanationHeading>
										<InfoText>
											In the Implicit Flow, tokens are returned directly from the authorization
											endpoint in the URL fragment (#), without an intermediate authorization code
											exchange step. This makes it simpler but less secure.
										</InfoText>
									</ExplanationSection>

									<FlowDiagram>
										{[
											'User clicks login to start the flow',
											'App redirects to PingOne with authorization request',
											'User authenticates and approves scopes',
											'PingOne returns tokens directly in URL fragment',
											'App extracts and validates tokens from URL',
										].map((description, index) => (
											<FlowStep key={description}>
												<FlowStepNumber>{index + 1}</FlowStepNumber>
												<FlowStepContent>
													<StrongText>{description}</StrongText>
												</FlowStepContent>
											</FlowStep>
										))}
									</FlowDiagram>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('credentials')}
								aria-expanded={!collapsedSections.credentials}
							>
								<CollapsibleTitle>
									<FiSettings /> Application Configuration & Credentials
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.credentials}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.credentials && (
								<CollapsibleContent>
									<CredentialsInput
										environmentId={credentials.environmentId || ''}
										clientId={credentials.clientId || ''}
										clientSecret={''}
										redirectUri={credentials.redirectUri || ''}
										scopes={credentials.scopes || credentials.scope || ''}
										loginHint={credentials.loginHint || ''}
										onEnvironmentIdChange={(value) => handleFieldChange('environmentId', value)}
										onClientIdChange={(value) => handleFieldChange('clientId', value)}
										onClientSecretChange={() => {}} // Not used in Implicit
										onRedirectUriChange={(value) => handleFieldChange('redirectUri', value)}
										onScopesChange={(value) => handleFieldChange('scopes', value)}
										onLoginHintChange={(value) => handleFieldChange('loginHint', value)}
										onCopy={handleCopy}
										emptyRequiredFields={emptyRequiredFields}
										copiedField={copiedField}
										showClientSecret={false}
									/>

									<PingOneApplicationConfig value={pingOneConfig} onChange={savePingOneConfig} />

									<ActionRow>
										<Button onClick={handleSaveConfiguration} $variant="primary">
											<FiSettings /> Save Configuration
										</Button>
										<Button onClick={handleClearConfiguration} $variant="danger">
											<FiRefreshCw /> Clear Configuration
										</Button>
									</ActionRow>

									{(!credentials.clientId || !credentials.environmentId) && (
										<InfoBox $variant="warning" style={{ marginTop: '1.5rem' }}>
											<FiAlertCircle size={20} />
											<div>
												<InfoTitle>Required: Fill in Credentials</InfoTitle>
												<InfoText>
													<StrongText>Environment ID</StrongText> and{' '}
													<StrongText>Client ID</StrongText> are required to continue. Fill these in
													above, then click "Save Configuration" before proceeding to Step 1.
												</InfoText>
											</div>
										</InfoBox>
									)}

									<InfoBox $variant="danger" style={{ marginTop: '2rem', color: '#7f1d1d' }}>
										<FiAlertCircle size={20} />
										<div>
											<InfoTitle style={{ color: '#7f1d1d' }}>Security Warning</InfoTitle>
											<InfoText style={{ color: '#7f1d1d' }}>
												Implicit Flow exposes tokens in the URL. Never use this for highly sensitive
												data. Consider migrating to Authorization Code + PKCE for better security.
											</InfoText>
										</div>
									</InfoBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						{/* Environment ID Input */}
						<EnvironmentIdInput
							initialEnvironmentId={credentials.environmentId || ''}
							onEnvironmentIdChange={(newEnvId) => {
								controller.setCredentials({
									...credentials,
									environmentId: newEnvId,
								});
								// Auto-save if we have both environmentId and clientId
								if (newEnvId && credentials.clientId && newEnvId.trim() && credentials.clientId.trim()) {
									controller.saveCredentials();
									v4ToastManager.showSuccess('Credentials auto-saved');
								}
							}}
							onIssuerUrlChange={() => {}}
							showSuggestions={true}
							autoDiscover={false}
						/>

						{/* Credentials Input */}
						<CredentialsInput
							environmentId={credentials.environmentId || ''}
							clientId={credentials.clientId || ''}
							clientSecret={credentials.clientSecret || ''}
							scopes={credentials.scope || 'openid profile email'}
							onEnvironmentIdChange={(newEnvId) => {
								controller.setCredentials({
									...credentials,
									environmentId: newEnvId,
								});
							}}
							onClientIdChange={(newClientId) => {
								controller.setCredentials({
									...credentials,
									clientId: newClientId,
								});
								// Auto-save if we have both environmentId and clientId
								if (credentials.environmentId && newClientId && credentials.environmentId.trim() && newClientId.trim()) {
									controller.saveCredentials();
									v4ToastManager.showSuccess('Credentials auto-saved');
								}
							}}
							onClientSecretChange={(newClientSecret) => {
								controller.setCredentials({
									...credentials,
									clientSecret: newClientSecret,
								});
							}}
							onScopesChange={(newScopes) => {
								controller.setCredentials({
									...credentials,
									scope: newScopes,
								});
							}}
							onCopy={handleCopy}
							showRedirectUri={true}
							showLoginHint={false}
						/>
					</>
				);

			case 1:
				return (
					<>
						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('authRequestOverview')}
								aria-expanded={!collapsedSections.authRequestOverview}
							>
								<CollapsibleTitle>
									<FiGlobe /> Authorization Request Overview
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.authRequestOverview}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.authRequestOverview && (
								<CollapsibleContent>
									<InfoBox $variant="info">
										<FiGlobe size={20} />
										<div>
											<InfoTitle>Building the Authorization URL</InfoTitle>
											<InfoText>
												The authorization URL includes all OAuth parameters. Unlike Authorization
												Code flow, the response_type is 'token' or 'id_token token', telling PingOne
												to return tokens directly instead of an authorization code.
											</InfoText>
										</div>
									</InfoBox>

									<InfoBox $variant="info">
										<FiInfo size={20} />
										<div>
											<InfoTitle>OAuth Implicit Flow Specific Parameters</InfoTitle>
											<InfoList>
												<li>
													<StrongText>response_type:</StrongText> token (Access Token only)
												</li>
												<li>
													<StrongText>nonce:</StrongText>{' '}
													<span style={{ color: '#059669', fontWeight: 'bold' }}>NOT required</span>{' '}
													in OAuth Implicit (no ID Token)
												</li>
												<li>
													<StrongText>state:</StrongText> CSRF protection (recommended)
												</li>
												<li>
													<StrongText>No PKCE:</StrongText> Implicit flow doesn't support PKCE
												</li>
												<li>
													<StrongText>No ID Token:</StrongText> OAuth 2.0 doesn't provide identity
													tokens
												</li>
											</InfoList>
										</div>
									</InfoBox>

									<InfoBox $variant="warning">
										<FiAlertCircle size={20} />
										<div>
											<InfoTitle>OAuth vs OIDC</InfoTitle>
											<InfoText>
												OAuth 2.0 Implicit returns only an Access Token for API authorization. If
												you need user authentication and identity, use OIDC Implicit Flow V5 which
												returns an ID Token.
											</InfoText>
										</div>
									</InfoBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						<SectionDivider />

						{/* Response Mode Selection */}
						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => setCollapsedSections(prev => ({ ...prev, responseMode: !prev.responseMode }))}
								aria-expanded={!collapsedSections.responseMode}
							>
								<CollapsibleTitle>
									<FiSettings /> Response Mode Selection
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.responseMode}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.responseMode && (
								<CollapsibleContent>
									<ResponseModeSelector
										flowKey="implicit"
										responseType="token"
										redirectUri={`${window.location.origin}/implicit-callback`}
										clientId={credentials.clientId}
										scope={credentials.scope || 'openid'}
										state="random_state_123"
										nonce="random_nonce_456"
										defaultMode="fragment"
										readOnlyFlowContext={false}
										onModeChange={setResponseMode}
									/>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						<SectionDivider />
						<ResultsSection>
							<ResultsHeading>
								<FiCheckCircle size={18} /> Build Authorization URL
							</ResultsHeading>
							<HelperText>
								Generate the authorization URL with Implicit flow parameters. Review it carefully
								before redirecting.
							</HelperText>

							{(!credentials.clientId || !credentials.environmentId) && (
								<InfoBox $variant="warning" style={{ marginBottom: '1.5rem' }}>
									<FiAlertCircle size={20} />
									<div>
										<InfoTitle>Missing Required Credentials</InfoTitle>
										<InfoText>
											<StrongText>Environment ID</StrongText> and <StrongText>Client ID</StrongText>{' '}
											are required to generate the authorization URL. Please go back to Step 0 to
											fill in these credentials first.
										</InfoText>
									</div>
								</InfoBox>
							)}

							<ActionRow>
								<HighlightedActionButton
									onClick={handleGenerateAuthUrl}
									$priority="primary"
									disabled={
										!!controller.authUrl || !credentials.clientId || !credentials.environmentId
									}
									title={
										!credentials.clientId || !credentials.environmentId
											? 'Complete Step 0: Fill in Environment ID and Client ID first'
											: 'Generate authorization URL with current credentials'
									}
								>
									{controller.authUrl ? <FiCheckCircle /> : <FiGlobe />}{' '}
									{controller.authUrl
										? 'Authorization URL Generated'
										: 'Generate Authorization URL'}
									<HighlightBadge>1</HighlightBadge>
								</HighlightedActionButton>

								{controller.authUrl && (
									<HighlightedActionButton onClick={handleOpenAuthUrl} $priority="success">
										<FiExternalLink /> Redirect to PingOne
										<HighlightBadge>2</HighlightBadge>
									</HighlightedActionButton>
								)}
							</ActionRow>

							{controller.authUrl && (
								<GeneratedContentBox>
									<GeneratedLabel>Generated Authorization URL</GeneratedLabel>
									<ColoredUrlDisplay
										url={controller.authUrl}
										label="OAuth 2.0 Implicit Flow Authorization URL"
										onCopy={() => handleCopy(controller.authUrl, 'Authorization URL')}
										showCopyButton={true}
										showOpenButton={true}
										onOpen={handleOpenAuthUrl}
									/>
								</GeneratedContentBox>
							)}
						</ResultsSection>
					</>
				);

			case 2:
				return (
					<>
						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('tokenResponseOverview')}
								aria-expanded={!collapsedSections.tokenResponseOverview}
							>
								<CollapsibleTitle>
									<FiCheckCircle /> Token Response Overview
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.tokenResponseOverview}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.tokenResponseOverview && (
								<CollapsibleContent>
									<InfoBox $variant="success">
										<FiCheckCircle size={20} />
										<div>
											<InfoTitle>Tokens Received Directly</InfoTitle>
											<InfoText>
												In Implicit Flow, tokens come back in the URL fragment (#) immediately after
												authorization. No token exchange step is needed, making it simpler but
												exposing tokens in the browser.
											</InfoText>
										</div>
									</InfoBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						{tokens && (
							<ResultsSection>
								<ResultsHeading>
									<FiCheckCircle size={18} /> Token Response
								</ResultsHeading>
								<HelperText>
									Review the tokens received. In Implicit Flow, there is no refresh token.
								</HelperText>

								<GeneratedContentBox>
									<GeneratedLabel>Raw Token Response</GeneratedLabel>
									<CodeBlock>{JSON.stringify(tokens, null, 2)}</CodeBlock>
									<ActionRow>
										<Button
											onClick={() => handleCopy(JSON.stringify(tokens, null, 2), 'Token Response')}
											$variant="primary"
										>
											<FiCopy /> Copy JSON Response
										</Button>
									</ActionRow>
								</GeneratedContentBox>

								<GeneratedContentBox style={{ marginTop: '1rem' }}>
									<GeneratedLabel>Tokens Received</GeneratedLabel>
									<ParameterGrid>
										{tokens.token_type && (
											<div>
												<ParameterLabel>Token Type</ParameterLabel>
												<ParameterValue>{String(tokens.token_type)}</ParameterValue>
											</div>
										)}
										{tokens.scope && (
											<div>
												<ParameterLabel>Scope</ParameterLabel>
												<ParameterValue>{String(tokens.scope)}</ParameterValue>
											</div>
										)}
										{tokens.expires_in && (
											<div>
												<ParameterLabel>Expires In</ParameterLabel>
												<ParameterValue>{String(tokens.expires_in)} seconds</ParameterValue>
											</div>
										)}
									</ParameterGrid>

									{tokens.access_token && (
										<JWTTokenDisplay
											token={String(tokens.access_token)}
											tokenType="access_token"
											onCopy={(tokenValue, label) => handleCopy(tokenValue, label)}
											copyLabel="Access Token"
											showTokenType={true}
											showExpiry={true}
											{...(tokens.expires_in && { expiresIn: Number(tokens.expires_in) })}
											{...(tokens.scope && { scope: String(tokens.scope) })}
										/>
									)}

									<ActionRow style={{ justifyContent: 'center', gap: '0.75rem' }}>
										<Button onClick={navigateToTokenManagement} $variant="primary">
											<FiExternalLink /> View in Token Management
										</Button>
									</ActionRow>
								</GeneratedContentBox>

								<InfoBox $variant="warning">
									<FiAlertCircle size={20} />
									<div>
										<InfoTitle>No Refresh Token</InfoTitle>
										<InfoText>
											Implicit Flow does not provide refresh tokens for security reasons. When the
											access token expires, users must re-authenticate.
										</InfoText>
									</div>
								</InfoBox>
							</ResultsSection>
						)}
					</>
				);

			case 3:
				return (
					<>
						<TokenIntrospect
							flowName="OAuth 2.0 Implicit Flow"
							flowVersion="V5"
							tokens={controller.tokens || {}}
							credentials={credentials as unknown as Record<string, unknown>}
							onResetFlow={handleResetFlow}
							onNavigateToTokenManagement={navigateToTokenManagement}
							onIntrospectToken={handleIntrospectToken}
							collapsedSections={{
								completionOverview: collapsedSections.completionOverview,
								completionDetails: collapsedSections.completionDetails,
								introspectionDetails: collapsedSections.introspectionDetails,
								rawJson: false,
							}}
							onToggleSection={(section) => {
								if (section === 'completionOverview' || section === 'completionDetails') {
									toggleSection(section as IntroSectionKey);
								}
							}}
							completionMessage="You've completed the OAuth 2.0 Implicit Flow. Remember: this flow is legacy and less secure than Authorization Code + PKCE."
							nextSteps={[
								'Inspect or decode tokens using the Token Management tools.',
								'Note: No refresh token is provided in Implicit Flow.',
								'Note: No UserInfo endpoint in OAuth (use OIDC for user identity).',
								'Consider migrating to Authorization Code + PKCE for better security.',
							]}
						/>

						{/* API Call Display for Token Introspection */}
						{introspectionApiCall && (
							<EnhancedApiCallDisplay
								apiCall={introspectionApiCall}
								options={{
									showEducationalNotes: true,
									showFlowContext: true,
									urlHighlightRules:
										EnhancedApiCallDisplayService.getDefaultHighlightRules('implicit'),
								}}
							/>
						)}

						{/* API Call Display Section */}
						{controller.tokens?.access_token && showApiCallExamples && (
							<CollapsibleSection>
								<CollapsibleHeaderButton
									onClick={() => toggleSection('apiCallDisplay')}
									aria-expanded={!collapsedSections.apiCallDisplay}
								>
									<CollapsibleTitle>
										<FiCode /> API Call Examples
									</CollapsibleTitle>
									<CollapsibleToggleIcon $collapsed={collapsedSections.apiCallDisplay}>
										<FiChevronDown />
									</CollapsibleToggleIcon>
								</CollapsibleHeaderButton>
								{!collapsedSections.apiCallDisplay && (
									<CollapsibleContent>
										<ResultsSection>
											<ResultsHeading>
												<FiCode size={18} /> Test Your Access Token
											</ResultsHeading>
											<HelperText>
												Use the access token to make authenticated API calls. Copy the curl command
												below to test your token with a PingOne API endpoint.
											</HelperText>

											<CodeExamplesDisplay
												flowType="implicit"
												stepId="step3"
												config={{
													baseUrl: 'https://auth.pingone.com',
													clientId: credentials.clientId || '',
													clientSecret: '', // Implicit flow doesn't use client secret
													redirectUri: credentials.redirectUri || '',
													scopes: credentials.scopes?.split(' ') || ['openid', 'profile'],
													environmentId: credentials.environmentId || '',
												}}
											/>

											<InfoBox $variant="info" style={{ marginTop: '1.5rem' }}>
												<FiInfo size={20} />
												<div>
													<InfoTitle>API Testing Tips</InfoTitle>
													<InfoText>
														• Replace <code>{'{environmentId}'}</code> with your actual PingOne
														environment ID
														<br />• The access token is valid for the scopes you requested
														<br />• Test with different API endpoints to verify token functionality
														<br />• Monitor token expiration and handle refresh scenarios
													</InfoText>
												</div>
											</InfoBox>
										</ResultsSection>
									</CollapsibleContent>
								)}
							</CollapsibleSection>
						)}
					</>
				);

			case 4:
				return (
					<>
						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('securityOverview')}
								aria-expanded={!collapsedSections.securityOverview}
							>
								<CollapsibleTitle>
									<FiShield /> Security Features Overview
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.securityOverview}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.securityOverview && (
								<CollapsibleContent>
									<InfoBox $variant="warning">
										<FiAlertTriangle size={20} />
										<div>
											<InfoTitle>Implicit Flow Security Considerations</InfoTitle>
											<InfoText>
												The Implicit Flow has inherent security limitations. Tokens are exposed in
												the URL, making them vulnerable to interception. This step demonstrates
												security best practices and mitigation strategies.
											</InfoText>
										</div>
									</InfoBox>

									<InfoBox $variant="info">
										<FiShield size={20} />
										<div>
											<InfoTitle>Security Features Demonstrated</InfoTitle>
											<InfoList>
												<li>
													<StrongText>Token Revocation:</StrongText> Ability to revoke access tokens
													before expiration
												</li>
												<li>
													<StrongText>Session Termination:</StrongText> End user sessions and
													invalidate tokens
												</li>
												<li>
													<StrongText>State Parameter:</StrongText> CSRF protection using state
													parameter
												</li>
												<li>
													<StrongText>HTTPS Only:</StrongText> All communications must use HTTPS
												</li>
												<li>
													<StrongText>Token Validation:</StrongText> Always validate tokens before
													use
												</li>
											</InfoList>
										</div>
									</InfoBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						<SectionDivider />
						<ResultsSection>
							<ResultsHeading>
								<FiShield size={18} /> Interactive Security Demonstrations
							</ResultsHeading>
							<HelperText>
								Test security features and understand how to protect your OAuth implementation.
							</HelperText>

							<SecurityFeaturesDemo
								tokens={controller.tokens as unknown as Record<string, unknown> | null}
								credentials={credentials as unknown as Record<string, unknown>}
								onTerminateSession={() => {
									v4ToastManager.showSuccess('Session termination completed.');
								}}
								onRevokeTokens={() => {
									v4ToastManager.showSuccess('Token revocation completed.');
								}}
							/>
						</ResultsSection>

						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('securityBestPractices')}
								aria-expanded={!collapsedSections.securityBestPractices}
							>
								<CollapsibleTitle>
									<FiCheckCircle /> Security Best Practices
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.securityBestPractices}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.securityBestPractices && (
								<CollapsibleContent>
									<InfoBox $variant="success">
										<FiCheckCircle size={20} />
										<div>
											<InfoTitle>Recommended Security Practices</InfoTitle>
											<InfoList>
												<li>
													<StrongText>Use HTTPS:</StrongText> Always use HTTPS for all OAuth
													endpoints
												</li>
												<li>
													<StrongText>Validate State:</StrongText> Always validate the state
													parameter to prevent CSRF
												</li>
												<li>
													<StrongText>Short Token Lifetimes:</StrongText> Use short-lived access
													tokens
												</li>
												<li>
													<StrongText>Token Storage:</StrongText> Never store tokens in localStorage
													for production
												</li>
												<li>
													<StrongText>Consider PKCE:</StrongText> Use Authorization Code + PKCE
													instead of Implicit
												</li>
												<li>
													<StrongText>Regular Audits:</StrongText> Regularly audit and rotate client
													secrets
												</li>
											</InfoList>
										</div>
									</InfoBox>

									<InfoBox $variant="danger">
										<FiAlertCircle size={20} />
										<div>
											<InfoTitle>Critical Security Warnings</InfoTitle>
											<InfoText>
												<StrongText>⚠️ Production Warning:</StrongText> The Implicit Flow is
												deprecated by OAuth 2.1 specification due to security concerns. Use
												Authorization Code + PKCE flow for new implementations.
											</InfoText>
										</div>
									</InfoBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>
					</>
				);

			case 5:
				return (
					<>
						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('flowSummary')}
								aria-expanded={!collapsedSections.flowSummary}
							>
								<CollapsibleTitle>
									<FiCheckCircle /> Flow Completion Summary
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.flowSummary}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.flowSummary && (
								<CollapsibleContent>
									<InfoBox $variant="success">
										<FiCheckCircle size={20} />
										<div>
											<InfoTitle>OAuth 2.0 Implicit Flow Completed!</InfoTitle>
											<InfoText>
												Congratulations! You have successfully completed the OAuth 2.0 Implicit Flow
												demonstration. This flow returned an access token directly in the URL
												fragment for API authorization.
											</InfoText>
										</div>
									</InfoBox>

									<GeneratedContentBox>
										<GeneratedLabel>Flow Summary</GeneratedLabel>
										<ParameterGrid>
											<div>
												<ParameterLabel>Flow Type</ParameterLabel>
												<ParameterValue>OAuth 2.0 Implicit</ParameterValue>
											</div>
											<div>
												<ParameterLabel>Tokens Received</ParameterLabel>
												<ParameterValue>Access Token Only</ParameterValue>
											</div>
											<div>
												<ParameterLabel>Security Level</ParameterLabel>
												<ParameterValue>Legacy (Deprecated)</ParameterValue>
											</div>
											<div>
												<ParameterLabel>Refresh Token</ParameterLabel>
												<ParameterValue>Not Provided</ParameterValue>
											</div>
											<div style={{ gridColumn: '1 / -1' }}>
												<ParameterLabel>Recommended Alternative</ParameterLabel>
												<ParameterValue>Authorization Code + PKCE Flow</ParameterValue>
											</div>
										</ParameterGrid>
									</GeneratedContentBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>

						<SectionDivider />
						<ResultsSection>
							<ResultsHeading>
								<FiExternalLink size={18} /> Next Steps & Recommendations
							</ResultsHeading>
							<HelperText>
								What to do now that you've completed the Implicit Flow demonstration.
							</HelperText>

							<InfoBox $variant="info">
								<FiInfo size={20} />
								<div>
									<InfoTitle>Recommended Actions</InfoTitle>
									<NextSteps
										steps={[
											'Try Authorization Code + PKCE: Experience the more secure modern OAuth flow',
											'Explore OIDC Implicit: See how OpenID Connect adds identity tokens',
											'Test API Calls: Use your access token to call protected APIs',
											'Review Security: Understand the limitations of Implicit Flow',
											'Token Management: Decode and inspect your tokens in detail',
										]}
									/>
								</div>
							</InfoBox>

							<ActionRow style={{ justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>
								<Button
									onClick={() => window.open('/authorization-code-v5', '_blank')}
									$variant="primary"
								>
									<FiExternalLink /> Try Auth Code + PKCE
								</Button>
								<Button
									onClick={() => window.open('/oidc-implicit-v5', '_blank')}
									$variant="secondary"
								>
									<FiExternalLink /> Try OIDC Implicit
								</Button>
								<Button onClick={navigateToTokenManagement} $variant="success">
									<FiKey /> Token Management
								</Button>
								<Button onClick={handleResetFlow} $variant="outline">
									<FiRefreshCw /> Reset Flow
								</Button>
							</ActionRow>
						</ResultsSection>

						<CollapsibleSection>
							<CollapsibleHeaderButton
								onClick={() => toggleSection('flowComparison')}
								aria-expanded={!collapsedSections.flowComparison}
							>
								<CollapsibleTitle>
									<FiShield /> Flow Comparison & Migration Guide
								</CollapsibleTitle>
								<CollapsibleToggleIcon $collapsed={collapsedSections.flowComparison}>
									<FiChevronDown />
								</CollapsibleToggleIcon>
							</CollapsibleHeaderButton>
							{!collapsedSections.flowComparison && (
								<CollapsibleContent>
									<InfoBox $variant="warning">
										<FiAlertTriangle size={20} />
										<div>
											<InfoTitle>Implicit Flow vs Authorization Code + PKCE</InfoTitle>
											<NextSteps
												steps={[
													'Security: Auth Code + PKCE is more secure (no token exposure)',
													'Tokens: Auth Code provides refresh tokens for long-term access',
													'Standards: Auth Code + PKCE is OAuth 2.1 recommended',
													'Browser Support: Auth Code works better with modern browsers',
													'Migration: Implicit Flow is deprecated - plan migration',
												]}
											/>
										</div>
									</InfoBox>

									<InfoBox $variant="success">
										<FiCheckCircle size={20} />
										<div>
											<InfoTitle>Migration Benefits</InfoTitle>
											<InfoText>
												Migrating to Authorization Code + PKCE provides better security, refresh
												tokens, and compliance with modern OAuth standards. Your applications will
												be more secure and future-proof.
											</InfoText>
										</div>
									</InfoBox>
								</CollapsibleContent>
							)}
						</CollapsibleSection>
					</>
				);

			default:
				return null;
		}
	}, [
		collapsedSections,
		controller,
		currentStep,
		emptyRequiredFields,
		copiedField,
		handleCopy,
		handleGenerateAuthUrl,
		handleOpenAuthUrl,
		handleClearConfiguration,
		handleFieldChange,
		handleResetFlow,
		handleSaveConfiguration,
		handleIntrospectToken,
		navigateToTokenManagement,
		pingOneConfig,
		savePingOneConfig,
		showApiCallExamples,
		toggleSection,
	]);

	return (
		<Container>
			<ContentWrapper>
				<FlowHeader flowId="oauth-implicit-v5" />
				<EnhancedFlowInfoCard flowType="oauth-implicit" />
				<FlowSequenceDisplay flowType="implicit" />

				<MainCard>
					<StepHeader>
						<StepHeaderLeft>
							<VersionBadge>Implicit Flow · V5 · Legacy</VersionBadge>
							<StepHeaderTitle>{STEP_METADATA[currentStep].title}</StepHeaderTitle>
							<StepHeaderSubtitle>{STEP_METADATA[currentStep].subtitle}</StepHeaderSubtitle>
						</StepHeaderLeft>
						<StepHeaderRight>
							<StepNumber>{String(currentStep + 1).padStart(2, '0')}</StepNumber>
							<StepTotal>of {String(STEP_METADATA.length).padStart(2, '0')}</StepTotal>
						</StepHeaderRight>
					</StepHeader>

					{!isStepValid(currentStep) && currentStep !== 0 && (
						<RequirementsIndicator>
							<RequirementsIcon>
								<FiAlertCircle />
							</RequirementsIcon>
							<RequirementsText>
								<StrongText>Complete this step to continue:</StrongText>
								<ul>
									{getStepRequirements(currentStep).map((requirement, index) => (
										<li key={index}>{requirement}</li>
									))}
								</ul>
							</RequirementsText>
						</RequirementsIndicator>
					)}
					<StepContentWrapper>{renderStepContent}</StepContentWrapper>
				</MainCard>
			</ContentWrapper>

			<StepNavigationButtons
				currentStep={currentStep}
				totalSteps={STEP_METADATA.length}
				onPrevious={handlePrev}
				onReset={handleResetFlow}
				onNext={handleNext}
				canNavigateNext={canNavigateNext()}
				isFirstStep={currentStep === 0}
				nextButtonText={isStepValid(currentStep) ? 'Next' : 'Complete above action'}
				disabledMessage="Complete the action above to continue"
			/>

			<LoginSuccessModal
				isOpen={showSuccessModal}
				onClose={() => setShowSuccessModal(false)}
				title="🎉 Implicit Flow Success!"
				message="Access token received successfully! You can now explore token analysis and make API calls."
				autoCloseDelay={5000}
			/>
		</Container>
	);
};

export default OAuthImplicitFlowV5;
