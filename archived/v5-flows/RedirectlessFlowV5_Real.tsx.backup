// src/pages/flows/RedirectlessFlowV5_Real.tsx
// V5.1 PingOne Redirectless Flow with pi.flow response_mode
// Based on OAuth 2.0 Authorization Code Flow but with pi.flow for redirectless experience

import { useCallback, useEffect, useId, useMemo, useState } from 'react';
import {
	FiAlertCircle,
	FiArrowRight,
	FiCheckCircle,
	FiChevronDown,
	FiCopy,
	FiExternalLink,
	FiEye,
	FiEyeOff,
	FiGlobe,
	FiInfo,
	FiKey,
	FiRefreshCw,
	FiSettings,
	FiShield,
	FiZap,
} from 'react-icons/fi';
import styled from 'styled-components';
import ConfigurationSummaryCard from '../../components/ConfigurationSummaryCard';
import EnhancedFlowWalkthrough from '../../components/EnhancedFlowWalkthrough';
import FlowConfigurationRequirements from '../../components/FlowConfigurationRequirements';
import FlowInfoCard from '../../components/FlowInfoCard';
import FlowSequenceDisplay from '../../components/FlowSequenceDisplay';
import { ExplanationHeading, ExplanationSection } from '../../components/InfoBlocks';
import LoginSuccessModal from '../../components/LoginSuccessModal';
import PingOneApplicationConfig, {
	type PingOneApplicationState,
} from '../../components/PingOneApplicationConfig';
import {
	HelperText,
	ResultsHeading,
	ResultsSection,
	SectionDivider,
} from '../../components/ResultsPanel';
import SecurityFeaturesDemo from '../../components/SecurityFeaturesDemo';
import { StepNavigationButtons } from '../../components/StepNavigationButtons';
import type { StepCredentials } from '../../components/steps/CommonSteps';
import TokenIntrospect from '../../components/TokenIntrospect';
import UserInformationStep from '../../components/UserInformationStep';
import { useAuthorizationCodeFlowController } from '../../hooks/useAuthorizationCodeFlowController';
import { FlowHeader } from '../../services/flowHeaderService';
import { EnhancedApiCallDisplay } from '../../components/EnhancedApiCallDisplay';
import { EnhancedApiCallDisplayService } from '../../services/enhancedApiCallDisplayService';
import { TokenIntrospectionService, IntrospectionApiCallData } from '../../services/tokenIntrospectionService';
import { getFlowInfo } from '../../utils/flowInfoConfig';
import { decodeJWTHeader } from '../../utils/jwks';
import { usePageScroll } from '../../hooks/usePageScroll';
import { v4ToastManager } from '../../utils/v4ToastMessages';
import ResponseModeSelector from '../../components/ResponseModeSelector';
import { ResponseMode } from '../../services/responseModeService';
import { V4ApiClient } from '../../utils/v4ApiClient';

const STEP_METADATA = [
	{ title: 'Step 0: Introduction & Setup', subtitle: 'Understand the PingOne Redirectless Flow with pi.flow' },
	{ title: 'Step 1: PKCE Parameters', subtitle: 'Generate secure verifier and challenge' },
	{
		title: 'Step 2: Authorization Request',
		subtitle: 'Build PingOne authorization URL with response_mode=pi.flow',
	},
	{ title: 'Step 3: Flow Object Response', subtitle: 'Process the pi.flow response and authentication UI' },
	{ title: 'Step 4: Direct Token Response', subtitle: 'Receive tokens directly from pi.flow response' },
	{ title: 'Step 5: User Information', subtitle: 'Inspect ID token claims and user info' },
	{ title: 'Step 6: Token Introspection', subtitle: 'Introspect access token and review results' },
	{ title: 'Step 7: Flow Complete', subtitle: 'Review your results and next steps' },
	{ title: 'Step 8: Security Features', subtitle: 'Demonstrate advanced security implementations' },
] as const;

type StepCompletionState = Record<number, boolean>;
type IntroSectionKey =
	| 'overview'
	| 'flowDiagram'
	| 'credentials'
	| 'results' // Step 0
	| 'pkceOverview'
	| 'pkceDetails' // Step 1
	| 'authRequestOverview'
	| 'authRequestDetails' // Step 2
	| 'flowResponseOverview'
	| 'flowResponseDetails' // Step 3
	| 'directTokensOverview'
	| 'directTokensDetails' // Step 4 (Direct Token Response)
	| 'userInfoOverview'
	| 'userInfoDetails' // Step 5
	| 'introspectionOverview'
	| 'introspectionDetails' // Step 6
	| 'completionOverview'
	| 'completionDetails'; // Step 7

const DEFAULT_APP_CONFIG: PingOneApplicationState = {
	clientAuthMethod: 'client_secret_post',
	allowRedirectUriPatterns: false,
	pkceEnforcement: 'REQUIRED',
	enableJWKS: false,

	// Response Types (from OIDC Settings) - pi.flow supports multiple response types
	responseTypeCode: true,
	responseTypeToken: true, // pi.flow can return tokens directly
	responseTypeIdToken: true, // pi.flow can return ID tokens directly

	// Grant Types (from OIDC Settings)
	grantTypeAuthorizationCode: true,

	// Advanced OIDC Parameters
	initiateLoginUri: '',
	targetLinkUri: '',
	signoffUrls: [],

	// Request Parameter Signature
	requestParameterSignatureRequirement: 'DEFAULT',

	// JWKS Settings
	jwksMethod: 'JWKS_URL',
	jwksUrl: '',
	jwks: '',

	// Pushed Authorization Request (PAR)
	requirePushedAuthorizationRequest: false,
	pushedAuthorizationRequestTimeout: 60,

	// Advanced Security Settings
	additionalRefreshTokenReplayProtection: false,
	includeX5tParameter: false,
	oidcSessionManagement: false,
	requestScopesForMultipleResources: false,
	terminateUserSessionByIdToken: false,

	// CORS Settings
	corsOrigins: [],
	corsAllowAnyOrigin: false,
};

const Container = styled.div`
	min-height: 100vh;
	background-color: #f9fafb;
	padding: 2rem 0 6rem;
`;

const ContentWrapper = styled.div`
	max-width: 64rem;
	margin: 0 auto;
	padding: 0 1rem;
`;

const Subtitle = styled.p`
	font-size: 1.125rem;
	color: var(--color-text-secondary, #4b5563);
	margin: 0 auto;
	max-width: 42rem;
`;

const MainCard = styled.div`
	background-color: #ffffff;
	border-radius: 1rem;
	box-shadow: 0 20px 40px rgba(15, 23, 42, 0.1);
	border: 1px solid #e2e8f0;
	overflow: hidden;
`;

const StepHeader = styled.div`
	background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
	color: #ffffff;
	padding: 2rem;
	display: flex;
	align-items: center;
	justify-content: space-between;
`;

const StepHeaderLeft = styled.div`
	display: flex;
	flex-direction: column;
	gap: 0.5rem;
`;

const VersionBadge = styled.span`
	align-self: flex-start;
	background: rgba(22, 163, 74, 0.2);
	border: 1px solid #4ade80;
	color: #bbf7d0;
	font-size: 0.75rem;
	font-weight: 600;
	letter-spacing: 0.08em;
	text-transform: uppercase;
	padding: 0.25rem 0.75rem;
	border-radius: 9999px;
`;

const StepHeaderTitle = styled.h2`
	font-size: 2rem;
	font-weight: 700;
	color: #1f2937;
	margin: 0;
`;

const StepHeaderSubtitle = styled.p`
	font-size: 1rem;
	color: rgba(255, 255, 255, 0.85);
	margin: 0;
`;

const StepHeaderRight = styled.div`
	text-align: right;
`;

const RequirementsIndicator = styled.div`
	background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
	border: 1px solid #f59e0b;
	border-radius: 8px;
	padding: 1rem;
	margin: 1rem 0;
	display: flex;
	align-items: flex-start;
	gap: 0.75rem;
`;

const RequirementsIcon = styled.div`
	color: #d97706;
	font-size: 1.25rem;
	margin-top: 0.125rem;
	flex-shrink: 0;
`;

const RequirementsText = styled.div`
	color: #92400e;
	font-size: 0.875rem;
	line-height: 1.5;

	strong {
		font-weight: 600;
		display: block;
		margin-bottom: 0.5rem;
	}

	ul {
		margin: 0;
		padding-left: 1.25rem;
	}

	li {
		margin-bottom: 0.25rem;
	}
`;

const StepNumber = styled.div`
	font-size: 2.5rem;
	font-weight: 700;
	line-height: 1;
`;

const StepTotal = styled.div`
	font-size: 0.875rem;
	color: rgba(255, 255, 255, 0.75);
	letter-spacing: 0.05em;
`;

const StepContentWrapper = styled.div`
	padding: 2rem;
	background: #ffffff;
`;

const CollapsibleSection = styled.section`
	border: 1px solid #e2e8f0;
	border-radius: 0.75rem;
	margin-bottom: 1.5rem;
	background-color: #ffffff;
	box-shadow: 0 10px 20px rgba(15, 23, 42, 0.05);
`;

const CollapsibleHeaderButton = styled.button<{ $collapsed?: boolean }>`
	display: flex;
	align-items: center;
	justify-content: space-between;
	width: 100%;
	padding: 1.25rem 1.5rem;
	background: linear-gradient(135deg, #f0fdf4 0%, #ecfdf3 100%);
	border: none;
	border-radius: 0.75rem;
	cursor: pointer;
	font-size: 1.1rem;
	font-weight: 600;
	color: #14532d;
	transition: background 0.2s ease;

	&:hover {
		background: linear-gradient(135deg, #dcfce7 0%, #ecfdf3 100%);
	}
`;

const CollapsibleTitle = styled.span`
	display: flex;
	align-items: center;
	gap: 0.75rem;
`;

const CollapsibleToggleIcon = styled.span<{ $collapsed?: boolean }>`
	${() => themeService.getCollapseIconStyles()}
	display: inline-flex;
	width: 32px;
	height: 32px;
	border-radius: 50%;
	transform: ${({ $collapsed }) => ($collapsed ? 'rotate(0deg)' : 'rotate(180deg)')};
	transition: transform 0.2s ease;

	svg {
		width: 16px;
		height: 16px;
	}

	&:hover {
		transform: ${({ $collapsed }) =>
			$collapsed ? 'rotate(0deg) scale(1.1)' : 'rotate(180deg) scale(1.1)'};
	}
`;

const CollapsibleContent = styled.div`
	padding: 1.5rem;
	padding-top: 0;
	animation: fadeIn 0.2s ease;

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
`;

const InfoBox = styled.div<{ $variant?: 'info' | 'warning' | 'success' }>`
	border-radius: 0.75rem;
	padding: 1.5rem;
	margin-bottom: 1.5rem;
	display: flex;
	gap: 1rem;
	align-items: flex-start;
	border: 1px solid
		${({ $variant }) => {
			if ($variant === 'warning') return '#f59e0b';
			if ($variant === 'success') return '#22c55e';
			return '#3b82f6';
		}};
	background-color:
		${({ $variant }) => {
			if ($variant === 'warning') return '#fef3c7';
			if ($variant === 'success') return '#dcfce7';
			return '#dbeafe';
		}};
`;

const InfoTitle = styled.h3`
	font-size: 1rem;
	font-weight: 600;
	color: #0f172a;
	margin: 0;
`;

const InfoText = styled.p`
	font-size: 0.95rem;
	color: #3f3f46;
	line-height: 1.7;
	margin: 0;
`;

const InfoList = styled.ul`
	font-size: 0.875rem;
	color: #334155;
	line-height: 1.5;
	margin: 0.5rem 0 0;
	padding-left: 1.5rem;
`;

const FlowSuitability = styled.div`
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
	gap: 1rem;
	margin: 1.5rem 0 0;
`;

const SuitabilityCard = styled.div<{ $variant: 'success' | 'warning' | 'danger' }>`
	border-radius: 1rem;
	padding: 1.25rem;
	border: 2px solid
		${({ $variant }) => {
			if ($variant === 'success') return '#34d399';
			if ($variant === 'warning') return '#fbbf24';
			return '#f87171';
		}};
	background:
		${({ $variant }) => {
			if ($variant === 'success') return '#dcfce7';
			if ($variant === 'warning') return '#fef3c7';
			return '#fee2e2';
		}};
	color: #1f2937;
	box-shadow: 0 10px 25px rgba(15, 23, 42, 0.08);

	ul {
		margin: 0.75rem 0 0;
		padding-left: 1.25rem;
		line-height: 1.6;
	}
`;

const GeneratedContentBox = styled.div`
	background-color: #dcfce7;
	border: 1px solid #22c55e;
	border-radius: 0.75rem;
	padding: 1.5rem;
	margin: 1.5rem 0;
	position: relative;
`;

const GeneratedLabel = styled.div`
	position: absolute;
	top: -10px;
	left: 16px;
	background-color: #16a34a;
	color: white;
	padding: 0.25rem 0.75rem;
	border-radius: 9999px;
	font-size: 0.75rem;
	font-weight: 600;
`;

const ParameterGrid = styled.div`
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
	gap: 1rem;
	margin: 1rem 0;
`;

const ParameterLabel = styled.div`
	font-size: 0.75rem;
	font-weight: 600;
	color: #16a34a;
	text-transform: uppercase;
	letter-spacing: 0.05em;
`;

const ParameterValue = styled.div`
	font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
	font-size: 0.875rem;
	color: #064e3b;
	word-break: break-all;
	background-color: #f0fdf4;
	padding: 0.5rem;
	border-radius: 0.25rem;
	border: 1px solid #bbf7d0;
`;

const ActionRow = styled.div`
	display: flex;
	flex-wrap: wrap;
	gap: 1rem;
	align-items: center;
	margin-top: 1.5rem;
`;

const Button = styled.button<{
	$variant?: 'primary' | 'success' | 'secondary' | 'danger' | 'outline';
}>`
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
	padding: 0.75rem 1.5rem;
	border-radius: 0.5rem;
	font-size: 0.875rem;
	font-weight: 600;
	cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};
	transition: all 0.2s;
	border: 1px solid transparent;
	opacity: ${(props) => (props.disabled ? 0.6 : 1)};

	${({ $variant }) =>
		$variant === 'primary' &&
		`
		background-color: #22c55e;
		color: #ffffff;
		&:hover:not(:disabled) {
			background-color: #16a34a;
		}
	`}

	${({ $variant }) =>
		$variant === 'success' &&
		`
		background-color: #16a34a;
		color: #ffffff;
		&:hover:not(:disabled) {
			background-color: #15803d;
		}
	`}

	${({ $variant }) =>
		$variant === 'secondary' &&
		`
		background-color: #0ea5e9;
		color: #ffffff;
		&:hover:not(:disabled) {
			background-color: #0284c7;
		}
	`}

	${({ $variant }) =>
		$variant === 'danger' &&
		`
		background-color: #ef4444;
		color: #ffffff;
		&:hover:not(:disabled) {
			background-color: #dc2626;
		}
	`}

	${({ $variant }) =>
		$variant === 'outline' &&
		`
		background-color: transparent;
		color: #14532d;
		border-color: #bbf7d0;
		&:hover:not(:disabled) {
			background-color: #f0fdf4;
			border-color: #22c55e;
		}
	`}
`;

const HighlightedActionButton = styled(Button)<{ $priority: 'primary' | 'success' }>`
	position: relative;
	background:
		${({ $priority }) =>
			$priority === 'primary'
				? 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)'
				: 'linear-gradient(135deg, #10b981 0%, #059669 100%)'};
	box-shadow:
		${({ $priority }) =>
			$priority === 'primary'
				? '0 6px 18px rgba(34, 197, 94, 0.35)'
				: '0 6px 18px rgba(16, 185, 129, 0.35)'};
	color: #ffffff;
	padding-right: 2.5rem;

	&:hover {
		transform: scale(1.02);
	}

	&:disabled {
		background:
			${({ $priority }) =>
				$priority === 'primary'
					? 'linear-gradient(135deg, rgba(34,197,94,0.6) 0%, rgba(22,163,74,0.6) 100%)'
					: 'linear-gradient(135deg, rgba(16,185,129,0.6) 0%, rgba(5,150,105,0.6) 100%)'};
		box-shadow: none;
	}
`;

const HighlightBadge = styled.span`
	position: absolute;
	top: -10px;
	right: -10px;
	background: #22c55e;
	color: #ffffff;
	border-radius: 9999px;
	width: 24px;
	height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	font-size: 0.75rem;
	font-weight: 700;
`;

const CodeBlock = styled.div`
	background-color: #1e293b;
	border: 1px solid #334155;
	border-radius: 0.5rem;
	overflow: hidden;
	margin: 1rem 0;
`;

const CodeBlockHeader = styled.div`
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0.75rem 1rem;
	background-color: #334155;
	color: #e2e8f0;
	font-size: 0.875rem;
	font-weight: 500;
`;

const CodeBlockContent = styled.pre`
	background-color: #1e293b;
	color: #e2e8f0;
	font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
	font-size: 0.875rem;
	line-height: 1.5;
	padding: 1rem;
	margin: 0;
	overflow-x: auto;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
`;

const GeneratedUrlDisplay = styled.div`
	background-color: #ecfdf3;
	border: 1px solid #bbf7d0;
	border-radius: 0.75rem;
	padding: 1.5rem;
	margin: 1.5rem 0;
	font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
	font-size: 0.9rem;
	word-break: break-all;
	position: relative;
`;

const Modal = styled.div<{ $show?: boolean }>`
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: rgba(15, 23, 42, 0.45);
	display: ${({ $show }) => ($show ? 'flex' : 'none')};
	align-items: center;
	justify-content: center;
	z-index: 2000;
`;

const ModalContent = styled.div`
	background-color: #ffffff;
	border-radius: 0.75rem;
	padding: 2rem;
	max-width: 400px;
	text-align: center;
	box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
`;

const ModalIcon = styled.div`
	width: 4rem;
	height: 4rem;
	border-radius: 50%;
	background-color: #22c55e;
	display: flex;
	align-items: center;
	justify-content: center;
	margin: 0 auto 1rem;
	font-size: 1.5rem;
	color: #ffffff;
`;

const ModalTitle = styled.h3`
	font-size: 1.25rem;
	font-weight: 600;
	color: var(--color-text-primary, #111827);
	margin-bottom: 0.5rem;
`;

const ModalText = styled.p`
	font-size: 0.875rem;
	color: #6b7280;
	line-height: 1.5;
`;

const EmptyState = styled.div`
	text-align: center;
	padding: 3rem 2rem;
	color: #166534;
`;

const EmptyIcon = styled.div`
	width: 4rem;
	height: 4rem;
	border-radius: 50%;
	background-color: #ecfdf3;
	display: flex;
	align-items: center;
	justify-content: center;
	margin: 0 auto 1rem;
	font-size: 1.5rem;
	color: #16a34a;
`;

const EmptyTitle = styled.h3`
	font-size: 1.125rem;
	font-weight: 600;
	color: #14532d;
	margin-bottom: 0.5rem;
`;

const StepHeading = styled.h3`
	font-size: 1.5rem;
	font-weight: 600;
	color: #1f2937;
	margin: 0 0 1rem 0;
`;

const CardHeading = styled.h4`
	font-size: 1.125rem;
	font-weight: 600;
	color: #1f2937;
	margin: 0 0 0.5rem 0;
`;

const EmptyText = styled.p`
	font-size: 0.875rem;
	color: #166534;
	margin-bottom: 1rem;
`;

const RedirectlessFlowV5Real: React.FC = () => {
	console.log('🚀 [RedirectlessFlowV5Real] Component loaded!', {
		url: window.location.href,
		search: window.location.search,
		timestamp: new Date().toISOString(),
	});

	const manualAuthCodeId = useId();
	const controller = useAuthorizationCodeFlowController({
		flowKey: 'oidc-authorization-code-v5',
		defaultFlowVariant: 'oidc',
		enableDebugger: true,
	});

	const [currentStep, setCurrentStep] = useState(0);
	const [pingOneConfig, setPingOneConfig] = useState<PingOneApplicationState>(DEFAULT_APP_CONFIG);
	const [emptyRequiredFields, setEmptyRequiredFields] = useState<Set<string>>(new Set());
	const [responseMode, setResponseMode] = useState<ResponseMode>('pi.flow');
	const [collapsedSections, setCollapsedSections] = useState<Record<IntroSectionKey, boolean>>({
		// Step 0
		overview: false,
		flowDiagram: true, // Collapsed by default
		credentials: false, // Expanded by default - users need to see credentials first
		results: false,
		// Step 1
		pkceOverview: false,
		pkceDetails: false,
		// Step 2
		authRequestOverview: false,
		authRequestDetails: false,
		// Step 3
		authResponseOverview: false,
		authResponseDetails: false,
		// Step 4 (Flow Tokens)
		flowTokensOverview: false,
		flowTokensDetails: false,
		// Step 5 (Standard Token Exchange)
		tokenExchangeOverview: false,
		tokenExchangeDetails: false,
		// Step 6
		userInfoOverview: false,
		userInfoDetails: false,
		// Step 7
		introspectionOverview: false,
		introspectionDetails: false,
		// Step 8
		completionOverview: false,
		completionDetails: false,
	});
	const [showRedirectModal, setShowRedirectModal] = useState(false);
	const [showLoginSuccessModal, setShowLoginSuccessModal] = useState(false);
	const [localAuthCode, setLocalAuthCode] = useState<string | null>(null);
	const [showSavedSecret, setShowSavedSecret] = useState(false);
	const [copiedField, setCopiedField] = useState<string | null>(null);
	const [_isFetchingUserInfo, setIsFetchingUserInfo] = useState(false);
	const [flowObject, setFlowObject] = useState<unknown>(null);
	const [flowStep, setFlowStep] = useState<string>('');
	const [flowTokens, setFlowTokens] = useState<unknown>(null);
	const [apiCallData, setApiCallData] = useState<any>(null);
	const [isMakingApiCall, setIsMakingApiCall] = useState(false);

	usePageScroll();

	// Scroll to top when step changes
	useEffect(() => {
		window.scrollTo({ top: 0, behavior: 'smooth' });
	}, [currentStep]);

	// Initialize API client
	const apiClient = new V4ApiClient('', 10000, 3);

	// Function to make redirectless authorization request with pi.flow
	const makeRedirectlessAuthRequest = useCallback(async () => {
		if (!pingOneConfig.environmentId || !pingOneConfig.clientId) {
			v4ToastManager.showError('Please configure environment ID and client ID first');
			return;
		}

		setIsMakingApiCall(true);
		
		try {
			// Generate PKCE parameters
			const codeVerifier = generateCodeVerifier();
			const codeChallenge = await generateCodeChallenge(codeVerifier);
			const state = generateState();
			const nonce = generateNonce();

			// Build authorization URL parameters
			const authParams = new URLSearchParams({
				response_type: 'code id_token token',
				response_mode: 'pi.flow',
				client_id: pingOneConfig.clientId,
				redirect_uri: pingOneConfig.redirectUri || 'https://yourapp.com/callback',
				scope: 'openid profile email',
				code_challenge: codeChallenge,
				code_challenge_method: 'S256',
				state: state,
				nonce: nonce
			});

			const authUrl = `https://auth.pingone.com/${pingOneConfig.environmentId}/as/authorize?${authParams.toString()}`;

			// For pi.flow, we make a POST request instead of redirecting
			const response = await fetch(authUrl, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'Accept': 'application/json'
				},
				body: authParams.toString()
			});

			const responseData = await response.json();

			// Create API call data for display
			const apiCall = {
				method: 'POST' as const,
				url: authUrl,
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'Accept': 'application/json'
				},
				body: authParams.toString(),
				response: {
					status: response.status,
					statusText: response.statusText,
					data: responseData
				},
				timestamp: new Date(),
				flowType: 'redirectless' as const,
				stepName: 'Authorization Request with pi.flow',
				description: 'Make redirectless authorization request using pi.flow response mode',
				educationalNotes: [
					'pi.flow eliminates browser redirects by returning flow objects directly',
					'This enables seamless authentication in SPAs and mobile apps',
					'The response contains both flow metadata and tokens'
				]
			};

			setApiCallData(apiCall);
			setFlowObject(responseData);
			
			if (responseData.flow) {
				setFlowStep(responseData.flow.state || 'active');
			}
			
			if (responseData.access_token || responseData.id_token) {
				setFlowTokens(responseData);
			}

			v4ToastManager.showSuccess('Redirectless authorization request successful!');
			
		} catch (error) {
			console.error('Redirectless auth request failed:', error);
			v4ToastManager.showError('Failed to make redirectless authorization request');
		} finally {
			setIsMakingApiCall(false);
		}
	}, [pingOneConfig]);

	// Helper functions for PKCE and state generation
	const generateCodeVerifier = () => {
		const array = new Uint8Array(32);
		crypto.getRandomValues(array);
		return btoa(String.fromCharCode.apply(null, Array.from(array)))
			.replace(/\+/g, '-')
			.replace(/\//g, '_')
			.replace(/=/g, '');
	};

	const generateCodeChallenge = async (verifier: string) => {
		const encoder = new TextEncoder();
		const data = encoder.encode(verifier);
		const digest = await crypto.subtle.digest('SHA-256', data);
		return btoa(String.fromCharCode.apply(null, Array.from(new Uint8Array(digest))))
			.replace(/\+/g, '-')
			.replace(/\//g, '_')
			.replace(/=/g, '');
	};

	const generateState = () => {
		const array = new Uint8Array(16);
		crypto.getRandomValues(array);
		return btoa(String.fromCharCode.apply(null, Array.from(array)))
			.replace(/\+/g, '-')
			.replace(/\//g, '_')
			.replace(/=/g, '');
	};

	const generateNonce = () => {
		const array = new Uint8Array(16);
		crypto.getRandomValues(array);
		return btoa(String.fromCharCode.apply(null, Array.from(array)))
			.replace(/\+/g, '-')
			.replace(/\//g, '_')
			.replace(/=/g, '');
	};

	const handleCopy = useCallback((text: string, fieldName: string) => {
		navigator.clipboard.writeText(text);
		setCopiedField(fieldName);
		setTimeout(() => setCopiedField(null), 2000);
	}, []);

	const toggleSection = useCallback((section: IntroSectionKey) => {
		setCollapsedSections(prev => ({
			...prev,
			[section]: !prev[section]
		}));
	}, []);

	return (
		<Container>
			<ContentWrapper>
				<FlowHeader flowType="redirectless" />
				<FlowInfoCard flowInfo={getFlowInfo('redirectless')!} />
				<FlowSequenceDisplay flowType="redirectless" />

				<InfoBox $variant="info">
					<FiInfo />
					<div>
						<InfoTitle>Response Mode Selection</InfoTitle>
						<InfoText>
							Choose how PingOne returns the authorization response. For redirectless flows, 
							select pi.flow to receive flow objects instead of browser redirects.
						</InfoText>
					</div>
				</InfoBox>

				<ResponseModeSelector
					selectedMode={responseMode}
					onModeChange={setResponseMode}
					responseType="code id_token token"
					clientType="confidential"
					platform="web"
					showRecommendations={true}
					showUrlExamples={true}
					baseUrl="https://auth.pingone.com/{envID}/as/authorize"
				/>
			</ContentWrapper>

			<ContentWrapper>
				<MainCard>
					<StepHeader>
						<StepHeaderLeft>
							<VersionBadge>V5 Real</VersionBadge>
							<StepHeaderTitle>Step {currentStep + 1}: {STEP_METADATA[currentStep]?.title || 'Unknown Step'}</StepHeaderTitle>
							<StepHeaderSubtitle>{STEP_METADATA[currentStep]?.subtitle || 'No description available'}</StepHeaderSubtitle>
						</StepHeaderLeft>
						<StepHeaderRight>
							<StepNumber>{currentStep + 1}</StepNumber>
							<StepTotal>of {STEP_METADATA.length}</StepTotal>
						</StepHeaderRight>
					</StepHeader>

					<StepContentWrapper>
						{currentStep === 0 && (
							<div>
								<InfoBox $variant="info">
									<FiInfo />
									<div>
										<InfoTitle>Redirectless Flow Overview</InfoTitle>
										<InfoText>
											The redirectless flow eliminates traditional OAuth redirects by using <code>response_mode=pi.flow</code>.
											Instead of redirects, PingOne returns a flow object that your application processes directly.
										</InfoText>
									</div>
								</InfoBox>

								<FlowSuitability>
									<SuitabilityCard $variant="success">
										<CardHeading>✅ Perfect For</CardHeading>
										<ul>
											<li>Single Page Applications</li>
											<li>Mobile Apps</li>
											<li>Headless Applications</li>
											<li>IoT Devices</li>
										</ul>
									</SuitabilityCard>
									<SuitabilityCard $variant="warning">
										<CardHeading>⚠️ Consider Alternatives</CardHeading>
										<ul>
											<li>Traditional web apps needing redirects</li>
											<li>Legacy OAuth implementations</li>
											<li>Third-party integrations</li>
										</ul>
									</SuitabilityCard>
								</FlowSuitability>

								<InfoBox $variant="info">
									<FiInfo />
									<div>
										<InfoTitle>Response Mode Selection Guidelines</InfoTitle>
										<InfoText>
											<strong>Flows that SHOULD have response_mode:</strong><br/>
											• Authorization Code Flow (OAuth 2.0 and OIDC)<br/>
											• Implicit Flow<br/>
											• Hybrid Flow (OIDC)<br/>
											• Redirectless Flow (with pi.flow)<br/><br/>
											<strong>Flows that should NOT have response_mode:</strong><br/>
											• Client Credentials Flow (no user interaction, no redirects)<br/>
											• Device Code Flow (no redirects, polling-based)<br/>
											• Resource Owner Password Credentials (no redirects)<br/>
											• JWT Bearer Token Flow (no redirects)
										</InfoText>
									</div>
								</InfoBox>

								<ActionRow>
									<Button $variant="primary" onClick={() => setCurrentStep(1)}>
										<FiArrowRight />
										Start Flow
									</Button>
								</ActionRow>
							</div>
						)}

						{currentStep === 1 && (
							<div>
								<StepHeading>PKCE Parameters Generated</StepHeading>
								<ParameterGrid>
									<div>
										<ParameterLabel>Code Verifier</ParameterLabel>
										<ParameterValue>Generated securely...</ParameterValue>
									</div>
									<div>
										<ParameterLabel>Code Challenge</ParameterLabel>
										<ParameterValue>SHA256 hash of verifier...</ParameterValue>
									</div>
								</ParameterGrid>

								<ActionRow>
									<Button $variant="outline" onClick={() => setCurrentStep(0)}>Back</Button>
									<Button $variant="primary" onClick={() => setCurrentStep(2)}>
										<FiArrowRight />
										Continue
									</Button>
								</ActionRow>
							</div>
						)}

						{currentStep === 2 && (
							<div>
								<StepHeading>Authorization Request with pi.flow</StepHeading>
								<InfoBox $variant="info">
									<FiInfo />
									<div>
										<InfoTitle>PingOne pi.flow Response Mode</InfoTitle>
										<InfoText>
											The <code>response_mode=pi.flow</code> parameter tells PingOne to return a flow object 
											instead of redirecting the user's browser. This enables redirectless OAuth flows.
										</InfoText>
									</div>
								</InfoBox>

								<InfoBox $variant="warning">
									<FiAlertTriangle />
									<div>
										<InfoTitle>No Browser Redirect Required</InfoTitle>
										<InfoText>
											Unlike traditional OAuth flows, pi.flow makes a direct API call to PingOne 
											instead of redirecting the user's browser. This eliminates the need for redirect URIs.
										</InfoText>
									</div>
								</InfoBox>

								<Button 
									$variant="primary" 
									onClick={makeRedirectlessAuthRequest}
									disabled={isMakingApiCall || !pingOneConfig.environmentId || !pingOneConfig.clientId}
									style={{ marginBottom: '1rem' }}
								>
									{isMakingApiCall ? 'Making Request...' : 'Make Redirectless Authorization Request'}
								</Button>

								{apiCallData && (
									<EnhancedApiCallDisplay
										apiCall={apiCallData}
										options={{
											showEducationalNotes: true,
											showFlowContext: true,
											urlHighlightRules: EnhancedApiCallDisplayService.getDefaultHighlightRules('redirectless')
										}}
									/>
								)}

								<ActionRow>
									<Button $variant="outline" onClick={() => setCurrentStep(1)}>Back</Button>
									<Button $variant="primary" onClick={() => setCurrentStep(3)}>
										<FiArrowRight />
										Continue
									</Button>
								</ActionRow>
							</div>
						)}

						{currentStep === 3 && (
							<div>
								<StepHeading>Flow Object Response</StepHeading>
								<InfoBox $variant="success">
									<FiCheckCircle />
									<div>
										<InfoTitle>pi.flow Response Received</InfoTitle>
										<InfoText>
											PingOne returns a JSON flow object containing authentication UI details and flow state.
											Your application processes this object to render the authentication interface.
										</InfoText>
									</div>
								</InfoBox>

								{flowObject ? (
									<CodeBlock>
										<CodeBlockHeader>
											<span>pi.flow Response Object (Live)</span>
											<Button $variant="ghost" size="sm" onClick={() => handleCopy(JSON.stringify(flowObject, null, 2), 'flowObject')}>
												<FiCopy />
												Copy
											</Button>
										</CodeBlockHeader>
										<CodeBlockContent>
											{JSON.stringify(flowObject, null, 2)}
										</CodeBlockContent>
									</CodeBlock>
								) : (
									<InfoBox $variant="warning">
										<FiAlertTriangle />
										<div>
											<InfoTitle>No Flow Object Yet</InfoTitle>
											<InfoText>
												Make the redirectless authorization request in Step 2 to see the pi.flow response object.
											</InfoText>
										</div>
									</InfoBox>
								)}

								{flowObject && (
									<InfoBox $variant="info">
										<FiInfo />
										<div>
											<InfoTitle>Flow State: {flowStep}</InfoTitle>
											<InfoText>
												The flow object contains metadata about the authentication process, including the current state 
												and any UI elements needed to complete the authentication.
											</InfoText>
										</div>
									</InfoBox>
								)}

								<ActionRow>
									<Button $variant="outline" onClick={() => setCurrentStep(2)}>Back</Button>
									<Button $variant="primary" onClick={() => setCurrentStep(4)}>
										<FiArrowRight />
										Continue
									</Button>
								</ActionRow>
							</div>
						)}

						{currentStep === 4 && (
							<div>
								<StepHeading>Direct Token Response</StepHeading>
								<InfoBox $variant="success">
									<FiCheckCircle />
									<div>
										<InfoTitle>Tokens Received Directly</InfoTitle>
										<InfoText>
											After successful authentication, PingOne returns tokens directly in the JSON response.
											No redirects needed - your application receives access tokens and ID tokens immediately.
										</InfoText>
									</div>
								</InfoBox>

								{flowTokens ? (
									<CodeBlock>
										<CodeBlockHeader>
											<span>Direct Token Response (Live)</span>
											<Button $variant="ghost" size="sm" onClick={() => handleCopy(JSON.stringify(flowTokens, null, 2), 'flowTokens')}>
												<FiCopy />
												Copy
											</Button>
										</CodeBlockHeader>
										<CodeBlockContent>
											{JSON.stringify(flowTokens, null, 2)}
										</CodeBlockContent>
									</CodeBlock>
								) : (
									<InfoBox $variant="warning">
										<FiAlertTriangle />
										<div>
											<InfoTitle>No Tokens Yet</InfoTitle>
											<InfoText>
												Complete the redirectless authorization request in Step 2 to see the direct token response.
											</InfoText>
										</div>
									</InfoBox>
								)}

								{flowTokens && (
									<InfoBox $variant="info">
										<FiInfo />
										<div>
											<InfoTitle>Token Types Available</InfoTitle>
											<InfoText>
												The pi.flow response can include access tokens, ID tokens, and authorization codes 
												directly, eliminating the need for additional token exchange requests.
											</InfoText>
										</div>
									</InfoBox>
								)}

								<ActionRow>
									<Button $variant="outline" onClick={() => setCurrentStep(3)}>Back</Button>
									<Button $variant="primary" onClick={() => setCurrentStep(5)}>
										<FiArrowRight />
										Continue
									</Button>
								</ActionRow>
							</div>
						)}

						{currentStep === STEP_METADATA.length - 1 && (
							<EmptyState>
								<EmptyIcon>
									<FiCheckCircle />
								</EmptyIcon>
								<EmptyTitle>Flow Complete!</EmptyTitle>
								<EmptyText>
									You have successfully completed the Redirectless Flow demonstration.
									This flow eliminates OAuth redirects by using flow objects and direct token handling.
								</EmptyText>
								<Button $variant="outline" onClick={() => setCurrentStep(0)}>
									Start Over
								</Button>
							</EmptyState>
						)}
					</StepContentWrapper>
				</MainCard>

			</ContentWrapper>

			<StepNavigationButtons
				currentStep={currentStep}
				totalSteps={STEP_METADATA.length}
				onPrevious={() => setCurrentStep(Math.max(0, currentStep - 1))}
				onNext={() => setCurrentStep(Math.min(STEP_METADATA.length - 1, currentStep + 1))}
				onReset={() => setCurrentStep(0)}
			/>
		</Container>
	);
};

export default RedirectlessFlowV5Real;