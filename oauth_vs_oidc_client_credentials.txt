Difference between OAuth Client Credentials and OIDC Client Credentials

OAuth 2.0 Client Credentials Flow

-   Purpose: Pure machine-to-machine authorization (no user involved).
-   How it works:
    -   Client authenticates with the Authorization Server (client ID +
        secret, private key JWT, mTLS, etc.).
    -   Client requests an access token using
        grant_type=client_credentials.
    -   Server issues an access token (and sometimes a refresh token).
-   What you get:
    -   Access token only.
    -   Used to call protected APIs on behalf of the client itself (not
        a user).
-   Identity:
    -   No end-user identity context.
    -   The “subject” of the token is the client app, not a person.

OIDC “Client Credentials”

-   OIDC extends OAuth 2.0 with an identity layer (ID Tokens, UserInfo,
    etc.).
-   But the Client Credentials grant does not involve an end-user login.
-   OIDC specs: ID Token is only returned in flows that authenticate a
    user (e.g., Authorization Code, Implicit, Hybrid).
-   Therefore:
    -   If you request Client Credentials with scope=openid, most
        providers will reject it or ignore openid, because there’s no
        user → no ID Token.
    -   You may still get an access token scoped for APIs, including
        APIs that expose system-level or client-level claims.

Key Differences

  -------------------------------------------------------------------------
  Aspect      OAuth Client Credentials       OIDC Client Credentials
  ----------- ------------------------------ ------------------------------
  Standard    Defined in OAuth 2.0 (RFC      Not really defined in OIDC
  Spec        6749)                          (OIDC assumes user context)

  Tokens      Access Token (+ optional       Same: Access Token only (no ID
  Returned    refresh)                       Token)

  Who is the  The client app itself          Still the client, not a user
  Subject?                                   

  User        No user                        No user (OIDC adds nothing
  Identity?                                  here)

  Use Case    M2M, API-to-API                Same, though some OIDC servers
                                             let you use OIDC-style claims
                                             in the access token
  -------------------------------------------------------------------------

Misconception

-   Some think “OIDC Client Credentials” gives you an ID Token.
-   That’s not correct — OIDC only issues ID Tokens when a user
    authenticates.
-   Client Credentials = always client-only, never user identity.

Summary

-   OAuth Client Credentials = machine-to-machine → Access Token.
-   OIDC Client Credentials = basically the same → Access Token only.
-   Difference: if you hit an OIDC provider, your access token may
    include OIDC-style claims (like issuer, audience, client_id), but
    you won’t get an ID Token because no user authenticated.
