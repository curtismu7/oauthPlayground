"import React, { useState, useEffect } from 'react';"
"import { useParams, Outlet, useNavigate } from 'react-router-dom';"
"import styled from 'styled-components';"
"import { Tabs, TabList, Tab, TabPanel } from 'react-tabs';"
"import 'react-tabs/style/react-tabs.css';"
"import { FiArrowRight, FiCode, FiLock, FiUser, FiClock, FiShield } from 'react-icons/fi';"
"import { Card, CardBody } from '../components/Card';"
""
"const FlowsContainer = styled.div`"
"  max-width: 1200px;"
"  margin: 0 auto;"
"  padding: 1.5rem;"
"`;"
""
"const FlowHeader = styled.div`"
"  margin-bottom: 2rem;"
"  "
"  h1 {"
"    font-size: 2rem;"
"    font-weight: 600;"
"    color: ${({ theme }) => theme.colors.gray900};"
"    margin-bottom: 0.5rem;"
"  }"
"  "
"  p {"
"    color: ${({ theme }) => theme.colors.gray600};"
"    font-size: 1.1rem;"
"    max-width: 800px;"
"  }"
"`;"
""
"const FlowTabs = styled(Tabs)`"
"  .react-tabs__tab-list {"
"    border-bottom: 1px solid ${({ theme }) => theme.colors.gray200};"
"    margin: 0 0 2rem;"
"    padding: 0;"
"  }"
"  "
"  .react-tabs__tab {"
"    display: inline-block;"
"    border: 1px solid transparent;"
"    border-bottom: none;"
"    bottom: -1px;"
"    position: relative;"
"    list-style: none;"
"    padding: 0.75rem 1.25rem;"
"    cursor: pointer;"
"    color: ${({ theme }) => theme.colors.gray600};"
"    font-weight: 500;"
"    margin-right: 0.5rem;"
"    border-radius: 0.25rem 0.25rem 0 0;"
"    transition: all 0.2s;"
"    "
"    &:hover {"
"      color: ${({ theme }) => theme.colors.primary};"
"    }"
"    "
"    &--selected {"
"      background: #fff;"
"      border-color: ${({ theme }) => theme.colors.gray200};"
"      color: ${({ theme }) => theme.colors.primary};"
"      border-bottom: 2px solid ${({ theme }) => theme.colors.primary};"
"    }"
"    "
"    &--disabled {"
"      color: ${({ theme }) => theme.colors.gray400};"
"      cursor: not-allowed;"
"    }"
"  }"
"`;"
""
"const FlowCard = styled(Card)`"
"  margin-bottom: 2rem;"
"  "
"  h2 {"
"    font-size: 1.5rem;"
"    margin-bottom: 1rem;"
"    display: flex;"
"    align-items: center;"
"    "
"    svg {"
"      margin-right: 0.75rem;"
"      color: ${({ theme }) => theme.colors.primary};"
"    }"
"  }"
"`;"
""
"const FlowGrid = styled.div`"
"  display: grid;"
"  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));"
"  gap: 1.5rem;"
"  margin-top: 2rem;"
"`;"
""
"const FlowStep = styled.div`"
"  background: white;"
"  border-radius: 0.5rem;"
"  padding: 1.5rem;"
"  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);"
"  border-left: 4px solid ${({ theme }) => theme.colors.primary};"
"  "
"  h3 {"
"    font-size: 1.1rem;"
"    margin-bottom: 0.75rem;"
"    display: flex;"
"    align-items: center;"
"    "
"    span {"
"      display: inline-flex;"
"      align-items: center;"
"      justify-content: center;"
"      width: 24px;"
"      height: 24px;"
"      background-color: ${({ theme }) => theme.colors.primary};"
"      color: white;"
"      border-radius: 50%;"
"      font-size: 0.75rem;"
"      font-weight: 600;"
"      margin-right: 0.75rem;"
"    }"
"  }"
"  "
"  p {"
"    color: ${({ theme }) => theme.colors.gray600};"
"    font-size: 0.95rem;"
"    line-height: 1.5;"
"  }"
"`;"
""
"const flows = ["
"  {"
"    id: 'authorization-code',"
"    title: 'Authorization Code Flow',"
"    icon: FiCode,"
"    description: 'The most common OAuth 2.0 flow, designed for web applications with a server-side component.',"
"    useCases: ["
"      'Web applications with a backend server',"
"      'Mobile applications with a backend server',"
"      'Single Page Applications (SPA) with a backend'"
"    ],"
"    security: 'High - Tokens are never exposed to the browser',"
"    steps: ["
      'User clicks "Login" and is redirected to the authorization server',
"      'User authenticates and grants consent',"
"      'Authorization server redirects back to your app with an authorization code',"
"      'Your server exchanges the code for tokens',"
"      'Your app receives the tokens and can make API requests'"
"    ]"
"  },"
"  {"
"    id: 'implicit',"
"    title: 'Implicit Flow',"
"    icon: FiCode,"
"    description: 'A simplified flow for client-side applications that cannot securely store a client secret.',"
"    useCases: ["
"      'Single Page Applications (SPA)',"
"      'Mobile applications',"
"      'Applications without a backend server'"
"    ],"
"    security: 'Medium - Tokens are exposed in the URL fragment',"
"    steps: ["
      'User clicks "Login" and is redirected to the authorization server',
"      'User authenticates and grants consent',"
"      'Authorization server redirects back to your app with tokens in the URL fragment',"
"      'Your app extracts the tokens and can make API requests'"
"    ]"
"  },"
"  {"
"    id: 'client-credentials',"
"    title: 'Client Credentials',"
"    icon: FiCode,"
"    description: 'Used for server-to-server authentication where the client is also the resource owner.',"
"    useCases: ["
"      'Machine-to-machine authentication',"
"      'Background processes',"
"      'Service accounts'"
"    ],"
"    security: 'High - No user interaction required',"
"    steps: ["
"      'Your server authenticates with the authorization server using client credentials',"
"      'Authorization server returns an access token',"
"      'Your server can use the token to make API requests'"
"    ]"
"  },"
"  {"
"    id: 'pkce',"
"    title: 'PKCE Flow',"
"    icon: FiCode,"
"    description: 'An extension of the Authorization Code flow that adds security for public clients.',"
"    useCases: ["
"      'Mobile applications',"
"      'Single Page Applications (SPA)',"
"      'Applications that cannot securely store a client secret'"
"    ],"
"    security: 'High - Protects against authorization code interception',"
"    steps: ["
"      'Your app generates a code verifier and challenge',"
      'User clicks "Login" and is redirected to the authorization server with the code challenge',
"      'User authenticates and grants consent',"
"      'Authorization server redirects back to your app with an authorization code',"
"      'Your app exchanges the code and code verifier for tokens'"
"    ]"
"  },"
"  {"
"    id: 'device-code',"
"    title: 'Device Code Flow',"
"    icon: FiCode,"
"    description: 'Designed for input-constrained devices that can display a code and prompt the user to visit a URL.',"
"    useCases: ["
"      'Smart TVs',"
"      'IoT devices',"
"      'CLI applications'"
"    ],"
"    security: 'High - Requires user interaction on a secondary device',"
"    steps: ["
"      'Your app requests a device code from the authorization server',"
"      'The app displays the code and verification URL to the user',"
"      'User navigates to the URL on another device and enters the code',"
"      'User authenticates and grants consent',"
"      'Your app polls the token endpoint until the user completes the flow',"
"      'Your app receives the tokens and can make API requests'"
"    ]"
"  }"
"];"
""
"const Flows = () => {"
"  const { flowId } = useParams();"
"  const navigate = useNavigate();"
"  const [selectedIndex, setSelectedIndex] = useState(0);"
""
"  useEffect(() => {"
"    if (flowId) {"
"      const index = flows.findIndex(flow => flow.id === flowId);"
"      if (index !== -1) {"
"        setSelectedIndex(index);"
"      }"
"    }"
"  }, [flowId]);"
""
"  const handleSelect = (index) => {"
"    setSelectedIndex(index);"
"    navigate(`/flows/${flows[index].id}`);"
"  };"
""
"  const currentFlow = flows[selectedIndex];"
""
"  return ("
"    "
"      "
        "OAuth 2.0 Flows"
"        "
          "Select an OAuth 2.0 flow to learn how it works and test it with your PingOne environment."
"          Each flow is designed for specific use cases and security requirements."
"        "
"      "
""
"      "
"        "
"          {flows.map(flow => ("
"            "
"              "
"                {flow.icon}"
"                {flow.title}"
"              "
"            "
"          ))}"
"        "
""
"        "
"          "
"            "
"              "
"                {currentFlow.icon}"
"                {currentFlow.title}"
"              "
"              "
"              {currentFlow.description}"
"              "
"              "
"                Use Cases:"
"                "
"                  {currentFlow.useCases.map((useCase, i) => ("
"                    {useCase}"
"                  ))}"
"                "
"              "
"              "
"              "
"                Security Level:"
"                {currentFlow.security}"
"              "
"              "
"              "
"                How It Works:"
"                "
"                  {currentFlow.steps.map((step, index) => ("
"                    "
"                      {index + 1} Step {index + 1}"
"                      {step}"
"                    "
"                  ))}"
"                "
"              "
"              "
"              "
"                <button "
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
"                  onClick={() => navigate(`/flows/${currentFlow.id}/demo`)}"
"                >"
"                  Try {currentFlow.title} "
"                "
"              "
"            "
"          "
"        "
"      "
"      "
"      "
"    "
"  );"
"};"
""
"export default Flows;"
