
# AI Prompt ‚Äî Client Credentials (OAuth & OIDC-compatible) ‚Üí V5 Parity
Version: 5.0.0 ‚Ä¢ Date: 2025-10-01

## Goal
Implement Client Credentials flows using the Authorize V5 shell, components, and logging. Provide pixel/UX parity with V5 where applicable (layout, nav, tokens panel, logs, toasts), while honoring the non-browser, non-redirect nature of Client Credentials.

---

## Scope & Deliverables
1. New V5 Client Credentials module (no redirects).
2. Support auth methods: client_secret_basic, client_secret_post, private_key_jwt, client_secret_jwt, tls_client_auth.
3. Config UI: issuer, client_id, auth method, scopes, audience/resource, lifetimes, keys, mTLS toggles.
4. Tokens UI: reuse V5 token bar, masked by default, copy buttons, expiry chip, decoded JWT view.
5. Unified logging: same as V5 (non-blocking, emoji, timestamps).

---

## Routes
- /flows/client-credentials
- /flows/client-credentials/summary

---

## Config Keys
- OIDC_ISSUER
- CC_CLIENT_ID, CC_CLIENT_SECRET
- CC_AUTH_METHOD
- CC_SCOPES
- CC_AUDIENCE/CC_RESOURCE
- CC_TOKEN_ENDPOINT (derived)
- CC_JWT_SIGNING_ALG, CC_JWT_SIGNING_KID, CC_JWT_PRIVATE_KEY
- CC_ENABLE_MTLS

---

## UX & Behavior
- Direct POST to token endpoint (no redirect).
- Same V5 visual design.
- Token bar identical to Authorize V5.
- Decoded JWT claims if access token is JWT.

---

## Security
- Prefer private_key_jwt.
- Never log secrets or raw tokens.
- Support mTLS.
- JWT validation (iss, aud, exp, iat, alg, kid).
- For opaque tokens: note that RS uses introspection.

---

## Unified Logging
Format: [YYYY-MM-DD HH:mm:ss] [ü§ù CLIENT-CREDS] [LEVEL] message

---

## Implementation
- requestClientCredentialsToken(): POST to /token, handle auth methods, normalize response.

---

## Testing
- Unit: all auth methods and errors.
- Integration: JWT vs opaque, refresh if supported.
- E2E: full UI flow, masking, decoding, copy buttons, a11y.
- Security: confirm no leaks.

---

## Acceptance Criteria
- Pixel parity with V5.
- Works across auth methods.
- Token UI: masked, copy, expiry, decoded JWT if present.
- Error handling matches V5 panels/toasts.
- Docs updated, tests pass.

---

## Cursor Tasks
1. Scaffold routes & config.
2. Add config keys.
3. Implement service layer.
4. Build hook + screens.
5. Add security checks.
6. Tests (unit, integration, e2e).
7. Docs.

---

## Nice-to-Haves
- Export token as .env.
- JWKS tester.
- Lifetime warning banner.
- mTLS probe.

---

**Now implement the V5 Client Credentials module with the above requirements.**
