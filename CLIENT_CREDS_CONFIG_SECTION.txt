			{!collapsedSections.configuration && (
				<CollapsibleContent>
					<PingOneApplicationConfig value={pingOneConfig} onChange={savePingOneConfig} />

					<CredentialsInput
						environmentId={credentials.environmentId || ''}
						clientId={credentials.clientId || ''}
						clientSecret={credentials.clientSecret || ''}
						scopes={(Array.isArray(credentials.scopes) ? credentials.scopes.join(' ') : credentials.scopes) || 'api:read api:write'}
						onEnvironmentIdChange={(value) => handleFieldChange('environmentId', value)}
						onClientIdChange={(value) => handleFieldChange('clientId', value)}
						onClientSecretChange={(value) => handleFieldChange('clientSecret', value)}
						onScopesChange={(value) => handleFieldChange('scopes', value)}
						onCopy={handleCopy}
						emptyRequiredFields={new Set(emptyRequiredFields)}
						copiedField={copiedField}
						showRedirectUri={false}
						showLoginHint={false}
					/>

					<InfoBox $variant="info" style={{ marginTop: '1rem' }}>
						<FiInfo size={20} />
						<div>
							<InfoText>
								<strong>Note:</strong> Client Credentials flow is a server-to-server flow and does not require a redirect URI or user login hint. Use API scopes (e.g., <code>api:read api:write</code>) instead of OIDC scopes like <code>openid</code>.
							</InfoText>
						</div>
					</InfoBox>

					<ActionRow>
						<Button onClick={handleSaveConfiguration}>
							<FiCheckCircle /> Save Configuration
						</Button>
						<Button onClick={handleClearConfiguration} $variant="outline">
							<FiRefreshCw /> Clear Configuration
						</Button>
					</ActionRow>

					<InfoBox $variant="warning" style={{ marginTop: '2rem', color: '#92400e' }}>
						<FiAlertCircle size={20} />
						<div>
							<InfoTitle style={{ color: '#92400e' }}>Testing vs Production</InfoTitle>
							<InfoText style={{ color: '#92400e' }}>
								This saves credentials locally for demos only. Remove secrets before production.
							</InfoText>
						</div>
					</InfoBox>
				</CollapsibleContent>
			)}
